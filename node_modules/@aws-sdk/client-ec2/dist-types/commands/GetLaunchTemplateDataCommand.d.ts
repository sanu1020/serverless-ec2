import { EndpointParameterInstructions } from "@aws-sdk/middleware-endpoint";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { EC2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../EC2Client";
import { GetLaunchTemplateDataRequest, GetLaunchTemplateDataResult } from "../models/models_5";
/**
 * The input for {@link GetLaunchTemplateDataCommand}.
 */
export interface GetLaunchTemplateDataCommandInput extends GetLaunchTemplateDataRequest {
}
/**
 * The output of {@link GetLaunchTemplateDataCommand}.
 */
export interface GetLaunchTemplateDataCommandOutput extends GetLaunchTemplateDataResult, __MetadataBearer {
}
/**
 * <p>Retrieves the configuration data of the specified instance. You can use this data to
 *             create a launch template. </p>
 *          <p>This action calls on other describe actions to get instance information. Depending on
 *             your instance configuration, you may need to allow the following actions in your IAM
 *             policy: <code>DescribeSpotInstanceRequests</code>,
 *                 <code>DescribeInstanceCreditSpecifications</code>, <code>DescribeVolumes</code>,
 *                 <code>DescribeInstanceAttribute</code>, and <code>DescribeElasticGpus</code>. Or,
 *             you can allow <code>describe*</code> depending on your instance requirements.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { EC2Client, GetLaunchTemplateDataCommand } from "@aws-sdk/client-ec2"; // ES Modules import
 * // const { EC2Client, GetLaunchTemplateDataCommand } = require("@aws-sdk/client-ec2"); // CommonJS import
 * const client = new EC2Client(config);
 * const command = new GetLaunchTemplateDataCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link GetLaunchTemplateDataCommandInput} for command's `input` shape.
 * @see {@link GetLaunchTemplateDataCommandOutput} for command's `response` shape.
 * @see {@link EC2ClientResolvedConfig | config} for EC2Client's `config` shape.
 *
 *
 * @example To get the launch template data for an instance
 * ```javascript
 * // This example gets the launch template data for the specified instance.
 * const input = {
 *   "InstanceId": "0123d646e8048babc"
 * };
 * const command = new GetLaunchTemplateDataCommand(input);
 * const response = await client.send(command);
 * /* response ==
 * {
 *   "LaunchTemplateData": {
 *     "BlockDeviceMappings": [
 *       {
 *         "DeviceName": "/dev/xvda",
 *         "Ebs": {
 *           "DeleteOnTermination": true,
 *           "Encrypted": false,
 *           "Iops": 100,
 *           "SnapshotId": "snap-02594938353ef77d3",
 *           "VolumeSize": 8,
 *           "VolumeType": "gp2"
 *         }
 *       }
 *     ],
 *     "EbsOptimized": false,
 *     "ImageId": "ami-32cf7b4a",
 *     "InstanceType": "t2.medium",
 *     "KeyName": "my-key-pair",
 *     "Monitoring": {
 *       "Enabled": false
 *     },
 *     "NetworkInterfaces": [
 *       {
 *         "AssociatePublicIpAddress": false,
 *         "DeleteOnTermination": true,
 *         "Description": "",
 *         "DeviceIndex": 0,
 *         "Groups": [
 *           "sg-d14e1bb4"
 *         ],
 *         "Ipv6Addresses": [],
 *         "NetworkInterfaceId": "eni-4338b5a9",
 *         "PrivateIpAddress": "10.0.3.233",
 *         "PrivateIpAddresses": [
 *           {
 *             "Primary": true,
 *             "PrivateIpAddress": "10.0.3.233"
 *           }
 *         ],
 *         "SubnetId": "subnet-5264e837"
 *       }
 *     ],
 *     "Placement": {
 *       "AvailabilityZone": "us-east-2b",
 *       "GroupName": "",
 *       "Tenancy": "default"
 *     }
 *   }
 * }
 * *\/
 * // example id: to-get-the-launch-template-data-for-an-instance--1529356515702
 * ```
 *
 */
export declare class GetLaunchTemplateDataCommand extends $Command<GetLaunchTemplateDataCommandInput, GetLaunchTemplateDataCommandOutput, EC2ClientResolvedConfig> {
    readonly input: GetLaunchTemplateDataCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    constructor(input: GetLaunchTemplateDataCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EC2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLaunchTemplateDataCommandInput, GetLaunchTemplateDataCommandOutput>;
    private serialize;
    private deserialize;
}
