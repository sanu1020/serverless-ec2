import { EndpointParameterInstructions } from "@aws-sdk/middleware-endpoint";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { EC2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../EC2Client";
import { DescribeLaunchTemplateVersionsRequest, DescribeLaunchTemplateVersionsResult } from "../models/models_4";
/**
 * The input for {@link DescribeLaunchTemplateVersionsCommand}.
 */
export interface DescribeLaunchTemplateVersionsCommandInput extends DescribeLaunchTemplateVersionsRequest {
}
/**
 * The output of {@link DescribeLaunchTemplateVersionsCommand}.
 */
export interface DescribeLaunchTemplateVersionsCommandOutput extends DescribeLaunchTemplateVersionsResult, __MetadataBearer {
}
/**
 * <p>Describes one or more versions of a specified launch template. You can describe all
 *             versions, individual versions, or a range of versions. You can also describe all the
 *             latest versions or all the default versions of all the launch templates in your
 *             account.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { EC2Client, DescribeLaunchTemplateVersionsCommand } from "@aws-sdk/client-ec2"; // ES Modules import
 * // const { EC2Client, DescribeLaunchTemplateVersionsCommand } = require("@aws-sdk/client-ec2"); // CommonJS import
 * const client = new EC2Client(config);
 * const command = new DescribeLaunchTemplateVersionsCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link DescribeLaunchTemplateVersionsCommandInput} for command's `input` shape.
 * @see {@link DescribeLaunchTemplateVersionsCommandOutput} for command's `response` shape.
 * @see {@link EC2ClientResolvedConfig | config} for EC2Client's `config` shape.
 *
 *
 * @example To describe the versions for a launch template
 * ```javascript
 * // This example describes the versions for the specified launch template.
 * const input = {
 *   "LaunchTemplateId": "068f72b72934aff71"
 * };
 * const command = new DescribeLaunchTemplateVersionsCommand(input);
 * const response = await client.send(command);
 * /* response ==
 * {
 *   "LaunchTemplateVersions": [
 *     {
 *       "CreateTime": "2017-11-20T13:12:32.000Z",
 *       "CreatedBy": "arn:aws:iam::123456789102:root",
 *       "DefaultVersion": false,
 *       "LaunchTemplateData": {
 *         "ImageId": "ami-6057e21a",
 *         "InstanceType": "t2.medium",
 *         "KeyName": "kp-us-east",
 *         "NetworkInterfaces": [
 *           {
 *             "DeviceIndex": 0,
 *             "Groups": [
 *               "sg-7c227019"
 *             ],
 *             "SubnetId": "subnet-1a2b3c4d"
 *           }
 *         ]
 *       },
 *       "LaunchTemplateId": "lt-068f72b72934aff71",
 *       "LaunchTemplateName": "Webservers",
 *       "VersionNumber": 2
 *     },
 *     {
 *       "CreateTime": "2017-11-20T12:52:33.000Z",
 *       "CreatedBy": "arn:aws:iam::123456789102:root",
 *       "DefaultVersion": true,
 *       "LaunchTemplateData": {
 *         "ImageId": "ami-aabbcc11",
 *         "InstanceType": "t2.medium",
 *         "KeyName": "kp-us-east",
 *         "NetworkInterfaces": [
 *           {
 *             "AssociatePublicIpAddress": true,
 *             "DeleteOnTermination": false,
 *             "DeviceIndex": 0,
 *             "Groups": [
 *               "sg-7c227019"
 *             ],
 *             "SubnetId": "subnet-7b16de0c"
 *           }
 *         ],
 *         "UserData": ""
 *       },
 *       "LaunchTemplateId": "lt-068f72b72934aff71",
 *       "LaunchTemplateName": "Webservers",
 *       "VersionNumber": 1
 *     }
 *   ]
 * }
 * *\/
 * // example id: to-describe-the-versions-for-a-launch-template-1529344425048
 * ```
 *
 */
export declare class DescribeLaunchTemplateVersionsCommand extends $Command<DescribeLaunchTemplateVersionsCommandInput, DescribeLaunchTemplateVersionsCommandOutput, EC2ClientResolvedConfig> {
    readonly input: DescribeLaunchTemplateVersionsCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    constructor(input: DescribeLaunchTemplateVersionsCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EC2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeLaunchTemplateVersionsCommandInput, DescribeLaunchTemplateVersionsCommandOutput>;
    private serialize;
    private deserialize;
}
