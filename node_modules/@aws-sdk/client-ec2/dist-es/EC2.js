import { AcceptAddressTransferCommand, } from "./commands/AcceptAddressTransferCommand";
import { AcceptReservedInstancesExchangeQuoteCommand, } from "./commands/AcceptReservedInstancesExchangeQuoteCommand";
import { AcceptTransitGatewayMulticastDomainAssociationsCommand, } from "./commands/AcceptTransitGatewayMulticastDomainAssociationsCommand";
import { AcceptTransitGatewayPeeringAttachmentCommand, } from "./commands/AcceptTransitGatewayPeeringAttachmentCommand";
import { AcceptTransitGatewayVpcAttachmentCommand, } from "./commands/AcceptTransitGatewayVpcAttachmentCommand";
import { AcceptVpcEndpointConnectionsCommand, } from "./commands/AcceptVpcEndpointConnectionsCommand";
import { AcceptVpcPeeringConnectionCommand, } from "./commands/AcceptVpcPeeringConnectionCommand";
import { AdvertiseByoipCidrCommand, } from "./commands/AdvertiseByoipCidrCommand";
import { AllocateAddressCommand, } from "./commands/AllocateAddressCommand";
import { AllocateHostsCommand, } from "./commands/AllocateHostsCommand";
import { AllocateIpamPoolCidrCommand, } from "./commands/AllocateIpamPoolCidrCommand";
import { ApplySecurityGroupsToClientVpnTargetNetworkCommand, } from "./commands/ApplySecurityGroupsToClientVpnTargetNetworkCommand";
import { AssignIpv6AddressesCommand, } from "./commands/AssignIpv6AddressesCommand";
import { AssignPrivateIpAddressesCommand, } from "./commands/AssignPrivateIpAddressesCommand";
import { AssignPrivateNatGatewayAddressCommand, } from "./commands/AssignPrivateNatGatewayAddressCommand";
import { AssociateAddressCommand, } from "./commands/AssociateAddressCommand";
import { AssociateClientVpnTargetNetworkCommand, } from "./commands/AssociateClientVpnTargetNetworkCommand";
import { AssociateDhcpOptionsCommand, } from "./commands/AssociateDhcpOptionsCommand";
import { AssociateEnclaveCertificateIamRoleCommand, } from "./commands/AssociateEnclaveCertificateIamRoleCommand";
import { AssociateIamInstanceProfileCommand, } from "./commands/AssociateIamInstanceProfileCommand";
import { AssociateInstanceEventWindowCommand, } from "./commands/AssociateInstanceEventWindowCommand";
import { AssociateIpamResourceDiscoveryCommand, } from "./commands/AssociateIpamResourceDiscoveryCommand";
import { AssociateNatGatewayAddressCommand, } from "./commands/AssociateNatGatewayAddressCommand";
import { AssociateRouteTableCommand, } from "./commands/AssociateRouteTableCommand";
import { AssociateSubnetCidrBlockCommand, } from "./commands/AssociateSubnetCidrBlockCommand";
import { AssociateTransitGatewayMulticastDomainCommand, } from "./commands/AssociateTransitGatewayMulticastDomainCommand";
import { AssociateTransitGatewayPolicyTableCommand, } from "./commands/AssociateTransitGatewayPolicyTableCommand";
import { AssociateTransitGatewayRouteTableCommand, } from "./commands/AssociateTransitGatewayRouteTableCommand";
import { AssociateTrunkInterfaceCommand, } from "./commands/AssociateTrunkInterfaceCommand";
import { AssociateVpcCidrBlockCommand, } from "./commands/AssociateVpcCidrBlockCommand";
import { AttachClassicLinkVpcCommand, } from "./commands/AttachClassicLinkVpcCommand";
import { AttachInternetGatewayCommand, } from "./commands/AttachInternetGatewayCommand";
import { AttachNetworkInterfaceCommand, } from "./commands/AttachNetworkInterfaceCommand";
import { AttachVerifiedAccessTrustProviderCommand, } from "./commands/AttachVerifiedAccessTrustProviderCommand";
import { AttachVolumeCommand, } from "./commands/AttachVolumeCommand";
import { AttachVpnGatewayCommand, } from "./commands/AttachVpnGatewayCommand";
import { AuthorizeClientVpnIngressCommand, } from "./commands/AuthorizeClientVpnIngressCommand";
import { AuthorizeSecurityGroupEgressCommand, } from "./commands/AuthorizeSecurityGroupEgressCommand";
import { AuthorizeSecurityGroupIngressCommand, } from "./commands/AuthorizeSecurityGroupIngressCommand";
import { BundleInstanceCommand, } from "./commands/BundleInstanceCommand";
import { CancelBundleTaskCommand, } from "./commands/CancelBundleTaskCommand";
import { CancelCapacityReservationCommand, } from "./commands/CancelCapacityReservationCommand";
import { CancelCapacityReservationFleetsCommand, } from "./commands/CancelCapacityReservationFleetsCommand";
import { CancelConversionTaskCommand, } from "./commands/CancelConversionTaskCommand";
import { CancelExportTaskCommand, } from "./commands/CancelExportTaskCommand";
import { CancelImageLaunchPermissionCommand, } from "./commands/CancelImageLaunchPermissionCommand";
import { CancelImportTaskCommand, } from "./commands/CancelImportTaskCommand";
import { CancelReservedInstancesListingCommand, } from "./commands/CancelReservedInstancesListingCommand";
import { CancelSpotFleetRequestsCommand, } from "./commands/CancelSpotFleetRequestsCommand";
import { CancelSpotInstanceRequestsCommand, } from "./commands/CancelSpotInstanceRequestsCommand";
import { ConfirmProductInstanceCommand, } from "./commands/ConfirmProductInstanceCommand";
import { CopyFpgaImageCommand, } from "./commands/CopyFpgaImageCommand";
import { CopyImageCommand } from "./commands/CopyImageCommand";
import { CopySnapshotCommand, } from "./commands/CopySnapshotCommand";
import { CreateCapacityReservationCommand, } from "./commands/CreateCapacityReservationCommand";
import { CreateCapacityReservationFleetCommand, } from "./commands/CreateCapacityReservationFleetCommand";
import { CreateCarrierGatewayCommand, } from "./commands/CreateCarrierGatewayCommand";
import { CreateClientVpnEndpointCommand, } from "./commands/CreateClientVpnEndpointCommand";
import { CreateClientVpnRouteCommand, } from "./commands/CreateClientVpnRouteCommand";
import { CreateCoipCidrCommand, } from "./commands/CreateCoipCidrCommand";
import { CreateCoipPoolCommand, } from "./commands/CreateCoipPoolCommand";
import { CreateCustomerGatewayCommand, } from "./commands/CreateCustomerGatewayCommand";
import { CreateDefaultSubnetCommand, } from "./commands/CreateDefaultSubnetCommand";
import { CreateDefaultVpcCommand, } from "./commands/CreateDefaultVpcCommand";
import { CreateDhcpOptionsCommand, } from "./commands/CreateDhcpOptionsCommand";
import { CreateEgressOnlyInternetGatewayCommand, } from "./commands/CreateEgressOnlyInternetGatewayCommand";
import { CreateFleetCommand } from "./commands/CreateFleetCommand";
import { CreateFlowLogsCommand, } from "./commands/CreateFlowLogsCommand";
import { CreateFpgaImageCommand, } from "./commands/CreateFpgaImageCommand";
import { CreateImageCommand } from "./commands/CreateImageCommand";
import { CreateInstanceEventWindowCommand, } from "./commands/CreateInstanceEventWindowCommand";
import { CreateInstanceExportTaskCommand, } from "./commands/CreateInstanceExportTaskCommand";
import { CreateInternetGatewayCommand, } from "./commands/CreateInternetGatewayCommand";
import { CreateIpamCommand } from "./commands/CreateIpamCommand";
import { CreateIpamPoolCommand, } from "./commands/CreateIpamPoolCommand";
import { CreateIpamResourceDiscoveryCommand, } from "./commands/CreateIpamResourceDiscoveryCommand";
import { CreateIpamScopeCommand, } from "./commands/CreateIpamScopeCommand";
import { CreateKeyPairCommand, } from "./commands/CreateKeyPairCommand";
import { CreateLaunchTemplateCommand, } from "./commands/CreateLaunchTemplateCommand";
import { CreateLaunchTemplateVersionCommand, } from "./commands/CreateLaunchTemplateVersionCommand";
import { CreateLocalGatewayRouteCommand, } from "./commands/CreateLocalGatewayRouteCommand";
import { CreateLocalGatewayRouteTableCommand, } from "./commands/CreateLocalGatewayRouteTableCommand";
import { CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand, } from "./commands/CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand";
import { CreateLocalGatewayRouteTableVpcAssociationCommand, } from "./commands/CreateLocalGatewayRouteTableVpcAssociationCommand";
import { CreateManagedPrefixListCommand, } from "./commands/CreateManagedPrefixListCommand";
import { CreateNatGatewayCommand, } from "./commands/CreateNatGatewayCommand";
import { CreateNetworkAclCommand, } from "./commands/CreateNetworkAclCommand";
import { CreateNetworkAclEntryCommand, } from "./commands/CreateNetworkAclEntryCommand";
import { CreateNetworkInsightsAccessScopeCommand, } from "./commands/CreateNetworkInsightsAccessScopeCommand";
import { CreateNetworkInsightsPathCommand, } from "./commands/CreateNetworkInsightsPathCommand";
import { CreateNetworkInterfaceCommand, } from "./commands/CreateNetworkInterfaceCommand";
import { CreateNetworkInterfacePermissionCommand, } from "./commands/CreateNetworkInterfacePermissionCommand";
import { CreatePlacementGroupCommand, } from "./commands/CreatePlacementGroupCommand";
import { CreatePublicIpv4PoolCommand, } from "./commands/CreatePublicIpv4PoolCommand";
import { CreateReplaceRootVolumeTaskCommand, } from "./commands/CreateReplaceRootVolumeTaskCommand";
import { CreateReservedInstancesListingCommand, } from "./commands/CreateReservedInstancesListingCommand";
import { CreateRestoreImageTaskCommand, } from "./commands/CreateRestoreImageTaskCommand";
import { CreateRouteCommand } from "./commands/CreateRouteCommand";
import { CreateRouteTableCommand, } from "./commands/CreateRouteTableCommand";
import { CreateSecurityGroupCommand, } from "./commands/CreateSecurityGroupCommand";
import { CreateSnapshotCommand, } from "./commands/CreateSnapshotCommand";
import { CreateSnapshotsCommand, } from "./commands/CreateSnapshotsCommand";
import { CreateSpotDatafeedSubscriptionCommand, } from "./commands/CreateSpotDatafeedSubscriptionCommand";
import { CreateStoreImageTaskCommand, } from "./commands/CreateStoreImageTaskCommand";
import { CreateSubnetCidrReservationCommand, } from "./commands/CreateSubnetCidrReservationCommand";
import { CreateSubnetCommand, } from "./commands/CreateSubnetCommand";
import { CreateTagsCommand } from "./commands/CreateTagsCommand";
import { CreateTrafficMirrorFilterCommand, } from "./commands/CreateTrafficMirrorFilterCommand";
import { CreateTrafficMirrorFilterRuleCommand, } from "./commands/CreateTrafficMirrorFilterRuleCommand";
import { CreateTrafficMirrorSessionCommand, } from "./commands/CreateTrafficMirrorSessionCommand";
import { CreateTrafficMirrorTargetCommand, } from "./commands/CreateTrafficMirrorTargetCommand";
import { CreateTransitGatewayCommand, } from "./commands/CreateTransitGatewayCommand";
import { CreateTransitGatewayConnectCommand, } from "./commands/CreateTransitGatewayConnectCommand";
import { CreateTransitGatewayConnectPeerCommand, } from "./commands/CreateTransitGatewayConnectPeerCommand";
import { CreateTransitGatewayMulticastDomainCommand, } from "./commands/CreateTransitGatewayMulticastDomainCommand";
import { CreateTransitGatewayPeeringAttachmentCommand, } from "./commands/CreateTransitGatewayPeeringAttachmentCommand";
import { CreateTransitGatewayPolicyTableCommand, } from "./commands/CreateTransitGatewayPolicyTableCommand";
import { CreateTransitGatewayPrefixListReferenceCommand, } from "./commands/CreateTransitGatewayPrefixListReferenceCommand";
import { CreateTransitGatewayRouteCommand, } from "./commands/CreateTransitGatewayRouteCommand";
import { CreateTransitGatewayRouteTableAnnouncementCommand, } from "./commands/CreateTransitGatewayRouteTableAnnouncementCommand";
import { CreateTransitGatewayRouteTableCommand, } from "./commands/CreateTransitGatewayRouteTableCommand";
import { CreateTransitGatewayVpcAttachmentCommand, } from "./commands/CreateTransitGatewayVpcAttachmentCommand";
import { CreateVerifiedAccessEndpointCommand, } from "./commands/CreateVerifiedAccessEndpointCommand";
import { CreateVerifiedAccessGroupCommand, } from "./commands/CreateVerifiedAccessGroupCommand";
import { CreateVerifiedAccessInstanceCommand, } from "./commands/CreateVerifiedAccessInstanceCommand";
import { CreateVerifiedAccessTrustProviderCommand, } from "./commands/CreateVerifiedAccessTrustProviderCommand";
import { CreateVolumeCommand, } from "./commands/CreateVolumeCommand";
import { CreateVpcCommand } from "./commands/CreateVpcCommand";
import { CreateVpcEndpointCommand, } from "./commands/CreateVpcEndpointCommand";
import { CreateVpcEndpointConnectionNotificationCommand, } from "./commands/CreateVpcEndpointConnectionNotificationCommand";
import { CreateVpcEndpointServiceConfigurationCommand, } from "./commands/CreateVpcEndpointServiceConfigurationCommand";
import { CreateVpcPeeringConnectionCommand, } from "./commands/CreateVpcPeeringConnectionCommand";
import { CreateVpnConnectionCommand, } from "./commands/CreateVpnConnectionCommand";
import { CreateVpnConnectionRouteCommand, } from "./commands/CreateVpnConnectionRouteCommand";
import { CreateVpnGatewayCommand, } from "./commands/CreateVpnGatewayCommand";
import { DeleteCarrierGatewayCommand, } from "./commands/DeleteCarrierGatewayCommand";
import { DeleteClientVpnEndpointCommand, } from "./commands/DeleteClientVpnEndpointCommand";
import { DeleteClientVpnRouteCommand, } from "./commands/DeleteClientVpnRouteCommand";
import { DeleteCoipCidrCommand, } from "./commands/DeleteCoipCidrCommand";
import { DeleteCoipPoolCommand, } from "./commands/DeleteCoipPoolCommand";
import { DeleteCustomerGatewayCommand, } from "./commands/DeleteCustomerGatewayCommand";
import { DeleteDhcpOptionsCommand, } from "./commands/DeleteDhcpOptionsCommand";
import { DeleteEgressOnlyInternetGatewayCommand, } from "./commands/DeleteEgressOnlyInternetGatewayCommand";
import { DeleteFleetsCommand, } from "./commands/DeleteFleetsCommand";
import { DeleteFlowLogsCommand, } from "./commands/DeleteFlowLogsCommand";
import { DeleteFpgaImageCommand, } from "./commands/DeleteFpgaImageCommand";
import { DeleteInstanceEventWindowCommand, } from "./commands/DeleteInstanceEventWindowCommand";
import { DeleteInternetGatewayCommand, } from "./commands/DeleteInternetGatewayCommand";
import { DeleteIpamCommand } from "./commands/DeleteIpamCommand";
import { DeleteIpamPoolCommand, } from "./commands/DeleteIpamPoolCommand";
import { DeleteIpamResourceDiscoveryCommand, } from "./commands/DeleteIpamResourceDiscoveryCommand";
import { DeleteIpamScopeCommand, } from "./commands/DeleteIpamScopeCommand";
import { DeleteKeyPairCommand, } from "./commands/DeleteKeyPairCommand";
import { DeleteLaunchTemplateCommand, } from "./commands/DeleteLaunchTemplateCommand";
import { DeleteLaunchTemplateVersionsCommand, } from "./commands/DeleteLaunchTemplateVersionsCommand";
import { DeleteLocalGatewayRouteCommand, } from "./commands/DeleteLocalGatewayRouteCommand";
import { DeleteLocalGatewayRouteTableCommand, } from "./commands/DeleteLocalGatewayRouteTableCommand";
import { DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand, } from "./commands/DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand";
import { DeleteLocalGatewayRouteTableVpcAssociationCommand, } from "./commands/DeleteLocalGatewayRouteTableVpcAssociationCommand";
import { DeleteManagedPrefixListCommand, } from "./commands/DeleteManagedPrefixListCommand";
import { DeleteNatGatewayCommand, } from "./commands/DeleteNatGatewayCommand";
import { DeleteNetworkAclCommand, } from "./commands/DeleteNetworkAclCommand";
import { DeleteNetworkAclEntryCommand, } from "./commands/DeleteNetworkAclEntryCommand";
import { DeleteNetworkInsightsAccessScopeAnalysisCommand, } from "./commands/DeleteNetworkInsightsAccessScopeAnalysisCommand";
import { DeleteNetworkInsightsAccessScopeCommand, } from "./commands/DeleteNetworkInsightsAccessScopeCommand";
import { DeleteNetworkInsightsAnalysisCommand, } from "./commands/DeleteNetworkInsightsAnalysisCommand";
import { DeleteNetworkInsightsPathCommand, } from "./commands/DeleteNetworkInsightsPathCommand";
import { DeleteNetworkInterfaceCommand, } from "./commands/DeleteNetworkInterfaceCommand";
import { DeleteNetworkInterfacePermissionCommand, } from "./commands/DeleteNetworkInterfacePermissionCommand";
import { DeletePlacementGroupCommand, } from "./commands/DeletePlacementGroupCommand";
import { DeletePublicIpv4PoolCommand, } from "./commands/DeletePublicIpv4PoolCommand";
import { DeleteQueuedReservedInstancesCommand, } from "./commands/DeleteQueuedReservedInstancesCommand";
import { DeleteRouteCommand } from "./commands/DeleteRouteCommand";
import { DeleteRouteTableCommand, } from "./commands/DeleteRouteTableCommand";
import { DeleteSecurityGroupCommand, } from "./commands/DeleteSecurityGroupCommand";
import { DeleteSnapshotCommand, } from "./commands/DeleteSnapshotCommand";
import { DeleteSpotDatafeedSubscriptionCommand, } from "./commands/DeleteSpotDatafeedSubscriptionCommand";
import { DeleteSubnetCidrReservationCommand, } from "./commands/DeleteSubnetCidrReservationCommand";
import { DeleteSubnetCommand, } from "./commands/DeleteSubnetCommand";
import { DeleteTagsCommand } from "./commands/DeleteTagsCommand";
import { DeleteTrafficMirrorFilterCommand, } from "./commands/DeleteTrafficMirrorFilterCommand";
import { DeleteTrafficMirrorFilterRuleCommand, } from "./commands/DeleteTrafficMirrorFilterRuleCommand";
import { DeleteTrafficMirrorSessionCommand, } from "./commands/DeleteTrafficMirrorSessionCommand";
import { DeleteTrafficMirrorTargetCommand, } from "./commands/DeleteTrafficMirrorTargetCommand";
import { DeleteTransitGatewayCommand, } from "./commands/DeleteTransitGatewayCommand";
import { DeleteTransitGatewayConnectCommand, } from "./commands/DeleteTransitGatewayConnectCommand";
import { DeleteTransitGatewayConnectPeerCommand, } from "./commands/DeleteTransitGatewayConnectPeerCommand";
import { DeleteTransitGatewayMulticastDomainCommand, } from "./commands/DeleteTransitGatewayMulticastDomainCommand";
import { DeleteTransitGatewayPeeringAttachmentCommand, } from "./commands/DeleteTransitGatewayPeeringAttachmentCommand";
import { DeleteTransitGatewayPolicyTableCommand, } from "./commands/DeleteTransitGatewayPolicyTableCommand";
import { DeleteTransitGatewayPrefixListReferenceCommand, } from "./commands/DeleteTransitGatewayPrefixListReferenceCommand";
import { DeleteTransitGatewayRouteCommand, } from "./commands/DeleteTransitGatewayRouteCommand";
import { DeleteTransitGatewayRouteTableAnnouncementCommand, } from "./commands/DeleteTransitGatewayRouteTableAnnouncementCommand";
import { DeleteTransitGatewayRouteTableCommand, } from "./commands/DeleteTransitGatewayRouteTableCommand";
import { DeleteTransitGatewayVpcAttachmentCommand, } from "./commands/DeleteTransitGatewayVpcAttachmentCommand";
import { DeleteVerifiedAccessEndpointCommand, } from "./commands/DeleteVerifiedAccessEndpointCommand";
import { DeleteVerifiedAccessGroupCommand, } from "./commands/DeleteVerifiedAccessGroupCommand";
import { DeleteVerifiedAccessInstanceCommand, } from "./commands/DeleteVerifiedAccessInstanceCommand";
import { DeleteVerifiedAccessTrustProviderCommand, } from "./commands/DeleteVerifiedAccessTrustProviderCommand";
import { DeleteVolumeCommand, } from "./commands/DeleteVolumeCommand";
import { DeleteVpcCommand } from "./commands/DeleteVpcCommand";
import { DeleteVpcEndpointConnectionNotificationsCommand, } from "./commands/DeleteVpcEndpointConnectionNotificationsCommand";
import { DeleteVpcEndpointsCommand, } from "./commands/DeleteVpcEndpointsCommand";
import { DeleteVpcEndpointServiceConfigurationsCommand, } from "./commands/DeleteVpcEndpointServiceConfigurationsCommand";
import { DeleteVpcPeeringConnectionCommand, } from "./commands/DeleteVpcPeeringConnectionCommand";
import { DeleteVpnConnectionCommand, } from "./commands/DeleteVpnConnectionCommand";
import { DeleteVpnConnectionRouteCommand, } from "./commands/DeleteVpnConnectionRouteCommand";
import { DeleteVpnGatewayCommand, } from "./commands/DeleteVpnGatewayCommand";
import { DeprovisionByoipCidrCommand, } from "./commands/DeprovisionByoipCidrCommand";
import { DeprovisionIpamPoolCidrCommand, } from "./commands/DeprovisionIpamPoolCidrCommand";
import { DeprovisionPublicIpv4PoolCidrCommand, } from "./commands/DeprovisionPublicIpv4PoolCidrCommand";
import { DeregisterImageCommand, } from "./commands/DeregisterImageCommand";
import { DeregisterInstanceEventNotificationAttributesCommand, } from "./commands/DeregisterInstanceEventNotificationAttributesCommand";
import { DeregisterTransitGatewayMulticastGroupMembersCommand, } from "./commands/DeregisterTransitGatewayMulticastGroupMembersCommand";
import { DeregisterTransitGatewayMulticastGroupSourcesCommand, } from "./commands/DeregisterTransitGatewayMulticastGroupSourcesCommand";
import { DescribeAccountAttributesCommand, } from "./commands/DescribeAccountAttributesCommand";
import { DescribeAddressesAttributeCommand, } from "./commands/DescribeAddressesAttributeCommand";
import { DescribeAddressesCommand, } from "./commands/DescribeAddressesCommand";
import { DescribeAddressTransfersCommand, } from "./commands/DescribeAddressTransfersCommand";
import { DescribeAggregateIdFormatCommand, } from "./commands/DescribeAggregateIdFormatCommand";
import { DescribeAvailabilityZonesCommand, } from "./commands/DescribeAvailabilityZonesCommand";
import { DescribeAwsNetworkPerformanceMetricSubscriptionsCommand, } from "./commands/DescribeAwsNetworkPerformanceMetricSubscriptionsCommand";
import { DescribeBundleTasksCommand, } from "./commands/DescribeBundleTasksCommand";
import { DescribeByoipCidrsCommand, } from "./commands/DescribeByoipCidrsCommand";
import { DescribeCapacityReservationFleetsCommand, } from "./commands/DescribeCapacityReservationFleetsCommand";
import { DescribeCapacityReservationsCommand, } from "./commands/DescribeCapacityReservationsCommand";
import { DescribeCarrierGatewaysCommand, } from "./commands/DescribeCarrierGatewaysCommand";
import { DescribeClassicLinkInstancesCommand, } from "./commands/DescribeClassicLinkInstancesCommand";
import { DescribeClientVpnAuthorizationRulesCommand, } from "./commands/DescribeClientVpnAuthorizationRulesCommand";
import { DescribeClientVpnConnectionsCommand, } from "./commands/DescribeClientVpnConnectionsCommand";
import { DescribeClientVpnEndpointsCommand, } from "./commands/DescribeClientVpnEndpointsCommand";
import { DescribeClientVpnRoutesCommand, } from "./commands/DescribeClientVpnRoutesCommand";
import { DescribeClientVpnTargetNetworksCommand, } from "./commands/DescribeClientVpnTargetNetworksCommand";
import { DescribeCoipPoolsCommand, } from "./commands/DescribeCoipPoolsCommand";
import { DescribeConversionTasksCommand, } from "./commands/DescribeConversionTasksCommand";
import { DescribeCustomerGatewaysCommand, } from "./commands/DescribeCustomerGatewaysCommand";
import { DescribeDhcpOptionsCommand, } from "./commands/DescribeDhcpOptionsCommand";
import { DescribeEgressOnlyInternetGatewaysCommand, } from "./commands/DescribeEgressOnlyInternetGatewaysCommand";
import { DescribeElasticGpusCommand, } from "./commands/DescribeElasticGpusCommand";
import { DescribeExportImageTasksCommand, } from "./commands/DescribeExportImageTasksCommand";
import { DescribeExportTasksCommand, } from "./commands/DescribeExportTasksCommand";
import { DescribeFastLaunchImagesCommand, } from "./commands/DescribeFastLaunchImagesCommand";
import { DescribeFastSnapshotRestoresCommand, } from "./commands/DescribeFastSnapshotRestoresCommand";
import { DescribeFleetHistoryCommand, } from "./commands/DescribeFleetHistoryCommand";
import { DescribeFleetInstancesCommand, } from "./commands/DescribeFleetInstancesCommand";
import { DescribeFleetsCommand, } from "./commands/DescribeFleetsCommand";
import { DescribeFlowLogsCommand, } from "./commands/DescribeFlowLogsCommand";
import { DescribeFpgaImageAttributeCommand, } from "./commands/DescribeFpgaImageAttributeCommand";
import { DescribeFpgaImagesCommand, } from "./commands/DescribeFpgaImagesCommand";
import { DescribeHostReservationOfferingsCommand, } from "./commands/DescribeHostReservationOfferingsCommand";
import { DescribeHostReservationsCommand, } from "./commands/DescribeHostReservationsCommand";
import { DescribeHostsCommand, } from "./commands/DescribeHostsCommand";
import { DescribeIamInstanceProfileAssociationsCommand, } from "./commands/DescribeIamInstanceProfileAssociationsCommand";
import { DescribeIdentityIdFormatCommand, } from "./commands/DescribeIdentityIdFormatCommand";
import { DescribeIdFormatCommand, } from "./commands/DescribeIdFormatCommand";
import { DescribeImageAttributeCommand, } from "./commands/DescribeImageAttributeCommand";
import { DescribeImagesCommand, } from "./commands/DescribeImagesCommand";
import { DescribeImportImageTasksCommand, } from "./commands/DescribeImportImageTasksCommand";
import { DescribeImportSnapshotTasksCommand, } from "./commands/DescribeImportSnapshotTasksCommand";
import { DescribeInstanceAttributeCommand, } from "./commands/DescribeInstanceAttributeCommand";
import { DescribeInstanceCreditSpecificationsCommand, } from "./commands/DescribeInstanceCreditSpecificationsCommand";
import { DescribeInstanceEventNotificationAttributesCommand, } from "./commands/DescribeInstanceEventNotificationAttributesCommand";
import { DescribeInstanceEventWindowsCommand, } from "./commands/DescribeInstanceEventWindowsCommand";
import { DescribeInstancesCommand, } from "./commands/DescribeInstancesCommand";
import { DescribeInstanceStatusCommand, } from "./commands/DescribeInstanceStatusCommand";
import { DescribeInstanceTypeOfferingsCommand, } from "./commands/DescribeInstanceTypeOfferingsCommand";
import { DescribeInstanceTypesCommand, } from "./commands/DescribeInstanceTypesCommand";
import { DescribeInternetGatewaysCommand, } from "./commands/DescribeInternetGatewaysCommand";
import { DescribeIpamPoolsCommand, } from "./commands/DescribeIpamPoolsCommand";
import { DescribeIpamResourceDiscoveriesCommand, } from "./commands/DescribeIpamResourceDiscoveriesCommand";
import { DescribeIpamResourceDiscoveryAssociationsCommand, } from "./commands/DescribeIpamResourceDiscoveryAssociationsCommand";
import { DescribeIpamsCommand, } from "./commands/DescribeIpamsCommand";
import { DescribeIpamScopesCommand, } from "./commands/DescribeIpamScopesCommand";
import { DescribeIpv6PoolsCommand, } from "./commands/DescribeIpv6PoolsCommand";
import { DescribeKeyPairsCommand, } from "./commands/DescribeKeyPairsCommand";
import { DescribeLaunchTemplatesCommand, } from "./commands/DescribeLaunchTemplatesCommand";
import { DescribeLaunchTemplateVersionsCommand, } from "./commands/DescribeLaunchTemplateVersionsCommand";
import { DescribeLocalGatewayRouteTablesCommand, } from "./commands/DescribeLocalGatewayRouteTablesCommand";
import { DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand, } from "./commands/DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand";
import { DescribeLocalGatewayRouteTableVpcAssociationsCommand, } from "./commands/DescribeLocalGatewayRouteTableVpcAssociationsCommand";
import { DescribeLocalGatewaysCommand, } from "./commands/DescribeLocalGatewaysCommand";
import { DescribeLocalGatewayVirtualInterfaceGroupsCommand, } from "./commands/DescribeLocalGatewayVirtualInterfaceGroupsCommand";
import { DescribeLocalGatewayVirtualInterfacesCommand, } from "./commands/DescribeLocalGatewayVirtualInterfacesCommand";
import { DescribeManagedPrefixListsCommand, } from "./commands/DescribeManagedPrefixListsCommand";
import { DescribeMovingAddressesCommand, } from "./commands/DescribeMovingAddressesCommand";
import { DescribeNatGatewaysCommand, } from "./commands/DescribeNatGatewaysCommand";
import { DescribeNetworkAclsCommand, } from "./commands/DescribeNetworkAclsCommand";
import { DescribeNetworkInsightsAccessScopeAnalysesCommand, } from "./commands/DescribeNetworkInsightsAccessScopeAnalysesCommand";
import { DescribeNetworkInsightsAccessScopesCommand, } from "./commands/DescribeNetworkInsightsAccessScopesCommand";
import { DescribeNetworkInsightsAnalysesCommand, } from "./commands/DescribeNetworkInsightsAnalysesCommand";
import { DescribeNetworkInsightsPathsCommand, } from "./commands/DescribeNetworkInsightsPathsCommand";
import { DescribeNetworkInterfaceAttributeCommand, } from "./commands/DescribeNetworkInterfaceAttributeCommand";
import { DescribeNetworkInterfacePermissionsCommand, } from "./commands/DescribeNetworkInterfacePermissionsCommand";
import { DescribeNetworkInterfacesCommand, } from "./commands/DescribeNetworkInterfacesCommand";
import { DescribePlacementGroupsCommand, } from "./commands/DescribePlacementGroupsCommand";
import { DescribePrefixListsCommand, } from "./commands/DescribePrefixListsCommand";
import { DescribePrincipalIdFormatCommand, } from "./commands/DescribePrincipalIdFormatCommand";
import { DescribePublicIpv4PoolsCommand, } from "./commands/DescribePublicIpv4PoolsCommand";
import { DescribeRegionsCommand, } from "./commands/DescribeRegionsCommand";
import { DescribeReplaceRootVolumeTasksCommand, } from "./commands/DescribeReplaceRootVolumeTasksCommand";
import { DescribeReservedInstancesCommand, } from "./commands/DescribeReservedInstancesCommand";
import { DescribeReservedInstancesListingsCommand, } from "./commands/DescribeReservedInstancesListingsCommand";
import { DescribeReservedInstancesModificationsCommand, } from "./commands/DescribeReservedInstancesModificationsCommand";
import { DescribeReservedInstancesOfferingsCommand, } from "./commands/DescribeReservedInstancesOfferingsCommand";
import { DescribeRouteTablesCommand, } from "./commands/DescribeRouteTablesCommand";
import { DescribeScheduledInstanceAvailabilityCommand, } from "./commands/DescribeScheduledInstanceAvailabilityCommand";
import { DescribeScheduledInstancesCommand, } from "./commands/DescribeScheduledInstancesCommand";
import { DescribeSecurityGroupReferencesCommand, } from "./commands/DescribeSecurityGroupReferencesCommand";
import { DescribeSecurityGroupRulesCommand, } from "./commands/DescribeSecurityGroupRulesCommand";
import { DescribeSecurityGroupsCommand, } from "./commands/DescribeSecurityGroupsCommand";
import { DescribeSnapshotAttributeCommand, } from "./commands/DescribeSnapshotAttributeCommand";
import { DescribeSnapshotsCommand, } from "./commands/DescribeSnapshotsCommand";
import { DescribeSnapshotTierStatusCommand, } from "./commands/DescribeSnapshotTierStatusCommand";
import { DescribeSpotDatafeedSubscriptionCommand, } from "./commands/DescribeSpotDatafeedSubscriptionCommand";
import { DescribeSpotFleetInstancesCommand, } from "./commands/DescribeSpotFleetInstancesCommand";
import { DescribeSpotFleetRequestHistoryCommand, } from "./commands/DescribeSpotFleetRequestHistoryCommand";
import { DescribeSpotFleetRequestsCommand, } from "./commands/DescribeSpotFleetRequestsCommand";
import { DescribeSpotInstanceRequestsCommand, } from "./commands/DescribeSpotInstanceRequestsCommand";
import { DescribeSpotPriceHistoryCommand, } from "./commands/DescribeSpotPriceHistoryCommand";
import { DescribeStaleSecurityGroupsCommand, } from "./commands/DescribeStaleSecurityGroupsCommand";
import { DescribeStoreImageTasksCommand, } from "./commands/DescribeStoreImageTasksCommand";
import { DescribeSubnetsCommand, } from "./commands/DescribeSubnetsCommand";
import { DescribeTagsCommand, } from "./commands/DescribeTagsCommand";
import { DescribeTrafficMirrorFiltersCommand, } from "./commands/DescribeTrafficMirrorFiltersCommand";
import { DescribeTrafficMirrorSessionsCommand, } from "./commands/DescribeTrafficMirrorSessionsCommand";
import { DescribeTrafficMirrorTargetsCommand, } from "./commands/DescribeTrafficMirrorTargetsCommand";
import { DescribeTransitGatewayAttachmentsCommand, } from "./commands/DescribeTransitGatewayAttachmentsCommand";
import { DescribeTransitGatewayConnectPeersCommand, } from "./commands/DescribeTransitGatewayConnectPeersCommand";
import { DescribeTransitGatewayConnectsCommand, } from "./commands/DescribeTransitGatewayConnectsCommand";
import { DescribeTransitGatewayMulticastDomainsCommand, } from "./commands/DescribeTransitGatewayMulticastDomainsCommand";
import { DescribeTransitGatewayPeeringAttachmentsCommand, } from "./commands/DescribeTransitGatewayPeeringAttachmentsCommand";
import { DescribeTransitGatewayPolicyTablesCommand, } from "./commands/DescribeTransitGatewayPolicyTablesCommand";
import { DescribeTransitGatewayRouteTableAnnouncementsCommand, } from "./commands/DescribeTransitGatewayRouteTableAnnouncementsCommand";
import { DescribeTransitGatewayRouteTablesCommand, } from "./commands/DescribeTransitGatewayRouteTablesCommand";
import { DescribeTransitGatewaysCommand, } from "./commands/DescribeTransitGatewaysCommand";
import { DescribeTransitGatewayVpcAttachmentsCommand, } from "./commands/DescribeTransitGatewayVpcAttachmentsCommand";
import { DescribeTrunkInterfaceAssociationsCommand, } from "./commands/DescribeTrunkInterfaceAssociationsCommand";
import { DescribeVerifiedAccessEndpointsCommand, } from "./commands/DescribeVerifiedAccessEndpointsCommand";
import { DescribeVerifiedAccessGroupsCommand, } from "./commands/DescribeVerifiedAccessGroupsCommand";
import { DescribeVerifiedAccessInstanceLoggingConfigurationsCommand, } from "./commands/DescribeVerifiedAccessInstanceLoggingConfigurationsCommand";
import { DescribeVerifiedAccessInstancesCommand, } from "./commands/DescribeVerifiedAccessInstancesCommand";
import { DescribeVerifiedAccessTrustProvidersCommand, } from "./commands/DescribeVerifiedAccessTrustProvidersCommand";
import { DescribeVolumeAttributeCommand, } from "./commands/DescribeVolumeAttributeCommand";
import { DescribeVolumesCommand, } from "./commands/DescribeVolumesCommand";
import { DescribeVolumesModificationsCommand, } from "./commands/DescribeVolumesModificationsCommand";
import { DescribeVolumeStatusCommand, } from "./commands/DescribeVolumeStatusCommand";
import { DescribeVpcAttributeCommand, } from "./commands/DescribeVpcAttributeCommand";
import { DescribeVpcClassicLinkCommand, } from "./commands/DescribeVpcClassicLinkCommand";
import { DescribeVpcClassicLinkDnsSupportCommand, } from "./commands/DescribeVpcClassicLinkDnsSupportCommand";
import { DescribeVpcEndpointConnectionNotificationsCommand, } from "./commands/DescribeVpcEndpointConnectionNotificationsCommand";
import { DescribeVpcEndpointConnectionsCommand, } from "./commands/DescribeVpcEndpointConnectionsCommand";
import { DescribeVpcEndpointsCommand, } from "./commands/DescribeVpcEndpointsCommand";
import { DescribeVpcEndpointServiceConfigurationsCommand, } from "./commands/DescribeVpcEndpointServiceConfigurationsCommand";
import { DescribeVpcEndpointServicePermissionsCommand, } from "./commands/DescribeVpcEndpointServicePermissionsCommand";
import { DescribeVpcEndpointServicesCommand, } from "./commands/DescribeVpcEndpointServicesCommand";
import { DescribeVpcPeeringConnectionsCommand, } from "./commands/DescribeVpcPeeringConnectionsCommand";
import { DescribeVpcsCommand, } from "./commands/DescribeVpcsCommand";
import { DescribeVpnConnectionsCommand, } from "./commands/DescribeVpnConnectionsCommand";
import { DescribeVpnGatewaysCommand, } from "./commands/DescribeVpnGatewaysCommand";
import { DetachClassicLinkVpcCommand, } from "./commands/DetachClassicLinkVpcCommand";
import { DetachInternetGatewayCommand, } from "./commands/DetachInternetGatewayCommand";
import { DetachNetworkInterfaceCommand, } from "./commands/DetachNetworkInterfaceCommand";
import { DetachVerifiedAccessTrustProviderCommand, } from "./commands/DetachVerifiedAccessTrustProviderCommand";
import { DetachVolumeCommand, } from "./commands/DetachVolumeCommand";
import { DetachVpnGatewayCommand, } from "./commands/DetachVpnGatewayCommand";
import { DisableAddressTransferCommand, } from "./commands/DisableAddressTransferCommand";
import { DisableAwsNetworkPerformanceMetricSubscriptionCommand, } from "./commands/DisableAwsNetworkPerformanceMetricSubscriptionCommand";
import { DisableEbsEncryptionByDefaultCommand, } from "./commands/DisableEbsEncryptionByDefaultCommand";
import { DisableFastLaunchCommand, } from "./commands/DisableFastLaunchCommand";
import { DisableFastSnapshotRestoresCommand, } from "./commands/DisableFastSnapshotRestoresCommand";
import { DisableImageDeprecationCommand, } from "./commands/DisableImageDeprecationCommand";
import { DisableIpamOrganizationAdminAccountCommand, } from "./commands/DisableIpamOrganizationAdminAccountCommand";
import { DisableSerialConsoleAccessCommand, } from "./commands/DisableSerialConsoleAccessCommand";
import { DisableTransitGatewayRouteTablePropagationCommand, } from "./commands/DisableTransitGatewayRouteTablePropagationCommand";
import { DisableVgwRoutePropagationCommand, } from "./commands/DisableVgwRoutePropagationCommand";
import { DisableVpcClassicLinkCommand, } from "./commands/DisableVpcClassicLinkCommand";
import { DisableVpcClassicLinkDnsSupportCommand, } from "./commands/DisableVpcClassicLinkDnsSupportCommand";
import { DisassociateAddressCommand, } from "./commands/DisassociateAddressCommand";
import { DisassociateClientVpnTargetNetworkCommand, } from "./commands/DisassociateClientVpnTargetNetworkCommand";
import { DisassociateEnclaveCertificateIamRoleCommand, } from "./commands/DisassociateEnclaveCertificateIamRoleCommand";
import { DisassociateIamInstanceProfileCommand, } from "./commands/DisassociateIamInstanceProfileCommand";
import { DisassociateInstanceEventWindowCommand, } from "./commands/DisassociateInstanceEventWindowCommand";
import { DisassociateIpamResourceDiscoveryCommand, } from "./commands/DisassociateIpamResourceDiscoveryCommand";
import { DisassociateNatGatewayAddressCommand, } from "./commands/DisassociateNatGatewayAddressCommand";
import { DisassociateRouteTableCommand, } from "./commands/DisassociateRouteTableCommand";
import { DisassociateSubnetCidrBlockCommand, } from "./commands/DisassociateSubnetCidrBlockCommand";
import { DisassociateTransitGatewayMulticastDomainCommand, } from "./commands/DisassociateTransitGatewayMulticastDomainCommand";
import { DisassociateTransitGatewayPolicyTableCommand, } from "./commands/DisassociateTransitGatewayPolicyTableCommand";
import { DisassociateTransitGatewayRouteTableCommand, } from "./commands/DisassociateTransitGatewayRouteTableCommand";
import { DisassociateTrunkInterfaceCommand, } from "./commands/DisassociateTrunkInterfaceCommand";
import { DisassociateVpcCidrBlockCommand, } from "./commands/DisassociateVpcCidrBlockCommand";
import { EnableAddressTransferCommand, } from "./commands/EnableAddressTransferCommand";
import { EnableAwsNetworkPerformanceMetricSubscriptionCommand, } from "./commands/EnableAwsNetworkPerformanceMetricSubscriptionCommand";
import { EnableEbsEncryptionByDefaultCommand, } from "./commands/EnableEbsEncryptionByDefaultCommand";
import { EnableFastLaunchCommand, } from "./commands/EnableFastLaunchCommand";
import { EnableFastSnapshotRestoresCommand, } from "./commands/EnableFastSnapshotRestoresCommand";
import { EnableImageDeprecationCommand, } from "./commands/EnableImageDeprecationCommand";
import { EnableIpamOrganizationAdminAccountCommand, } from "./commands/EnableIpamOrganizationAdminAccountCommand";
import { EnableReachabilityAnalyzerOrganizationSharingCommand, } from "./commands/EnableReachabilityAnalyzerOrganizationSharingCommand";
import { EnableSerialConsoleAccessCommand, } from "./commands/EnableSerialConsoleAccessCommand";
import { EnableTransitGatewayRouteTablePropagationCommand, } from "./commands/EnableTransitGatewayRouteTablePropagationCommand";
import { EnableVgwRoutePropagationCommand, } from "./commands/EnableVgwRoutePropagationCommand";
import { EnableVolumeIOCommand, } from "./commands/EnableVolumeIOCommand";
import { EnableVpcClassicLinkCommand, } from "./commands/EnableVpcClassicLinkCommand";
import { EnableVpcClassicLinkDnsSupportCommand, } from "./commands/EnableVpcClassicLinkDnsSupportCommand";
import { ExportClientVpnClientCertificateRevocationListCommand, } from "./commands/ExportClientVpnClientCertificateRevocationListCommand";
import { ExportClientVpnClientConfigurationCommand, } from "./commands/ExportClientVpnClientConfigurationCommand";
import { ExportImageCommand } from "./commands/ExportImageCommand";
import { ExportTransitGatewayRoutesCommand, } from "./commands/ExportTransitGatewayRoutesCommand";
import { GetAssociatedEnclaveCertificateIamRolesCommand, } from "./commands/GetAssociatedEnclaveCertificateIamRolesCommand";
import { GetAssociatedIpv6PoolCidrsCommand, } from "./commands/GetAssociatedIpv6PoolCidrsCommand";
import { GetAwsNetworkPerformanceDataCommand, } from "./commands/GetAwsNetworkPerformanceDataCommand";
import { GetCapacityReservationUsageCommand, } from "./commands/GetCapacityReservationUsageCommand";
import { GetCoipPoolUsageCommand, } from "./commands/GetCoipPoolUsageCommand";
import { GetConsoleOutputCommand, } from "./commands/GetConsoleOutputCommand";
import { GetConsoleScreenshotCommand, } from "./commands/GetConsoleScreenshotCommand";
import { GetDefaultCreditSpecificationCommand, } from "./commands/GetDefaultCreditSpecificationCommand";
import { GetEbsDefaultKmsKeyIdCommand, } from "./commands/GetEbsDefaultKmsKeyIdCommand";
import { GetEbsEncryptionByDefaultCommand, } from "./commands/GetEbsEncryptionByDefaultCommand";
import { GetFlowLogsIntegrationTemplateCommand, } from "./commands/GetFlowLogsIntegrationTemplateCommand";
import { GetGroupsForCapacityReservationCommand, } from "./commands/GetGroupsForCapacityReservationCommand";
import { GetHostReservationPurchasePreviewCommand, } from "./commands/GetHostReservationPurchasePreviewCommand";
import { GetInstanceTypesFromInstanceRequirementsCommand, } from "./commands/GetInstanceTypesFromInstanceRequirementsCommand";
import { GetInstanceUefiDataCommand, } from "./commands/GetInstanceUefiDataCommand";
import { GetIpamAddressHistoryCommand, } from "./commands/GetIpamAddressHistoryCommand";
import { GetIpamDiscoveredAccountsCommand, } from "./commands/GetIpamDiscoveredAccountsCommand";
import { GetIpamDiscoveredResourceCidrsCommand, } from "./commands/GetIpamDiscoveredResourceCidrsCommand";
import { GetIpamPoolAllocationsCommand, } from "./commands/GetIpamPoolAllocationsCommand";
import { GetIpamPoolCidrsCommand, } from "./commands/GetIpamPoolCidrsCommand";
import { GetIpamResourceCidrsCommand, } from "./commands/GetIpamResourceCidrsCommand";
import { GetLaunchTemplateDataCommand, } from "./commands/GetLaunchTemplateDataCommand";
import { GetManagedPrefixListAssociationsCommand, } from "./commands/GetManagedPrefixListAssociationsCommand";
import { GetManagedPrefixListEntriesCommand, } from "./commands/GetManagedPrefixListEntriesCommand";
import { GetNetworkInsightsAccessScopeAnalysisFindingsCommand, } from "./commands/GetNetworkInsightsAccessScopeAnalysisFindingsCommand";
import { GetNetworkInsightsAccessScopeContentCommand, } from "./commands/GetNetworkInsightsAccessScopeContentCommand";
import { GetPasswordDataCommand, } from "./commands/GetPasswordDataCommand";
import { GetReservedInstancesExchangeQuoteCommand, } from "./commands/GetReservedInstancesExchangeQuoteCommand";
import { GetSerialConsoleAccessStatusCommand, } from "./commands/GetSerialConsoleAccessStatusCommand";
import { GetSpotPlacementScoresCommand, } from "./commands/GetSpotPlacementScoresCommand";
import { GetSubnetCidrReservationsCommand, } from "./commands/GetSubnetCidrReservationsCommand";
import { GetTransitGatewayAttachmentPropagationsCommand, } from "./commands/GetTransitGatewayAttachmentPropagationsCommand";
import { GetTransitGatewayMulticastDomainAssociationsCommand, } from "./commands/GetTransitGatewayMulticastDomainAssociationsCommand";
import { GetTransitGatewayPolicyTableAssociationsCommand, } from "./commands/GetTransitGatewayPolicyTableAssociationsCommand";
import { GetTransitGatewayPolicyTableEntriesCommand, } from "./commands/GetTransitGatewayPolicyTableEntriesCommand";
import { GetTransitGatewayPrefixListReferencesCommand, } from "./commands/GetTransitGatewayPrefixListReferencesCommand";
import { GetTransitGatewayRouteTableAssociationsCommand, } from "./commands/GetTransitGatewayRouteTableAssociationsCommand";
import { GetTransitGatewayRouteTablePropagationsCommand, } from "./commands/GetTransitGatewayRouteTablePropagationsCommand";
import { GetVerifiedAccessEndpointPolicyCommand, } from "./commands/GetVerifiedAccessEndpointPolicyCommand";
import { GetVerifiedAccessGroupPolicyCommand, } from "./commands/GetVerifiedAccessGroupPolicyCommand";
import { GetVpnConnectionDeviceSampleConfigurationCommand, } from "./commands/GetVpnConnectionDeviceSampleConfigurationCommand";
import { GetVpnConnectionDeviceTypesCommand, } from "./commands/GetVpnConnectionDeviceTypesCommand";
import { ImportClientVpnClientCertificateRevocationListCommand, } from "./commands/ImportClientVpnClientCertificateRevocationListCommand";
import { ImportImageCommand } from "./commands/ImportImageCommand";
import { ImportInstanceCommand, } from "./commands/ImportInstanceCommand";
import { ImportKeyPairCommand, } from "./commands/ImportKeyPairCommand";
import { ImportSnapshotCommand, } from "./commands/ImportSnapshotCommand";
import { ImportVolumeCommand, } from "./commands/ImportVolumeCommand";
import { ListImagesInRecycleBinCommand, } from "./commands/ListImagesInRecycleBinCommand";
import { ListSnapshotsInRecycleBinCommand, } from "./commands/ListSnapshotsInRecycleBinCommand";
import { ModifyAddressAttributeCommand, } from "./commands/ModifyAddressAttributeCommand";
import { ModifyAvailabilityZoneGroupCommand, } from "./commands/ModifyAvailabilityZoneGroupCommand";
import { ModifyCapacityReservationCommand, } from "./commands/ModifyCapacityReservationCommand";
import { ModifyCapacityReservationFleetCommand, } from "./commands/ModifyCapacityReservationFleetCommand";
import { ModifyClientVpnEndpointCommand, } from "./commands/ModifyClientVpnEndpointCommand";
import { ModifyDefaultCreditSpecificationCommand, } from "./commands/ModifyDefaultCreditSpecificationCommand";
import { ModifyEbsDefaultKmsKeyIdCommand, } from "./commands/ModifyEbsDefaultKmsKeyIdCommand";
import { ModifyFleetCommand } from "./commands/ModifyFleetCommand";
import { ModifyFpgaImageAttributeCommand, } from "./commands/ModifyFpgaImageAttributeCommand";
import { ModifyHostsCommand } from "./commands/ModifyHostsCommand";
import { ModifyIdentityIdFormatCommand, } from "./commands/ModifyIdentityIdFormatCommand";
import { ModifyIdFormatCommand, } from "./commands/ModifyIdFormatCommand";
import { ModifyImageAttributeCommand, } from "./commands/ModifyImageAttributeCommand";
import { ModifyInstanceAttributeCommand, } from "./commands/ModifyInstanceAttributeCommand";
import { ModifyInstanceCapacityReservationAttributesCommand, } from "./commands/ModifyInstanceCapacityReservationAttributesCommand";
import { ModifyInstanceCreditSpecificationCommand, } from "./commands/ModifyInstanceCreditSpecificationCommand";
import { ModifyInstanceEventStartTimeCommand, } from "./commands/ModifyInstanceEventStartTimeCommand";
import { ModifyInstanceEventWindowCommand, } from "./commands/ModifyInstanceEventWindowCommand";
import { ModifyInstanceMaintenanceOptionsCommand, } from "./commands/ModifyInstanceMaintenanceOptionsCommand";
import { ModifyInstanceMetadataOptionsCommand, } from "./commands/ModifyInstanceMetadataOptionsCommand";
import { ModifyInstancePlacementCommand, } from "./commands/ModifyInstancePlacementCommand";
import { ModifyIpamCommand } from "./commands/ModifyIpamCommand";
import { ModifyIpamPoolCommand, } from "./commands/ModifyIpamPoolCommand";
import { ModifyIpamResourceCidrCommand, } from "./commands/ModifyIpamResourceCidrCommand";
import { ModifyIpamResourceDiscoveryCommand, } from "./commands/ModifyIpamResourceDiscoveryCommand";
import { ModifyIpamScopeCommand, } from "./commands/ModifyIpamScopeCommand";
import { ModifyLaunchTemplateCommand, } from "./commands/ModifyLaunchTemplateCommand";
import { ModifyLocalGatewayRouteCommand, } from "./commands/ModifyLocalGatewayRouteCommand";
import { ModifyManagedPrefixListCommand, } from "./commands/ModifyManagedPrefixListCommand";
import { ModifyNetworkInterfaceAttributeCommand, } from "./commands/ModifyNetworkInterfaceAttributeCommand";
import { ModifyPrivateDnsNameOptionsCommand, } from "./commands/ModifyPrivateDnsNameOptionsCommand";
import { ModifyReservedInstancesCommand, } from "./commands/ModifyReservedInstancesCommand";
import { ModifySecurityGroupRulesCommand, } from "./commands/ModifySecurityGroupRulesCommand";
import { ModifySnapshotAttributeCommand, } from "./commands/ModifySnapshotAttributeCommand";
import { ModifySnapshotTierCommand, } from "./commands/ModifySnapshotTierCommand";
import { ModifySpotFleetRequestCommand, } from "./commands/ModifySpotFleetRequestCommand";
import { ModifySubnetAttributeCommand, } from "./commands/ModifySubnetAttributeCommand";
import { ModifyTrafficMirrorFilterNetworkServicesCommand, } from "./commands/ModifyTrafficMirrorFilterNetworkServicesCommand";
import { ModifyTrafficMirrorFilterRuleCommand, } from "./commands/ModifyTrafficMirrorFilterRuleCommand";
import { ModifyTrafficMirrorSessionCommand, } from "./commands/ModifyTrafficMirrorSessionCommand";
import { ModifyTransitGatewayCommand, } from "./commands/ModifyTransitGatewayCommand";
import { ModifyTransitGatewayPrefixListReferenceCommand, } from "./commands/ModifyTransitGatewayPrefixListReferenceCommand";
import { ModifyTransitGatewayVpcAttachmentCommand, } from "./commands/ModifyTransitGatewayVpcAttachmentCommand";
import { ModifyVerifiedAccessEndpointCommand, } from "./commands/ModifyVerifiedAccessEndpointCommand";
import { ModifyVerifiedAccessEndpointPolicyCommand, } from "./commands/ModifyVerifiedAccessEndpointPolicyCommand";
import { ModifyVerifiedAccessGroupCommand, } from "./commands/ModifyVerifiedAccessGroupCommand";
import { ModifyVerifiedAccessGroupPolicyCommand, } from "./commands/ModifyVerifiedAccessGroupPolicyCommand";
import { ModifyVerifiedAccessInstanceCommand, } from "./commands/ModifyVerifiedAccessInstanceCommand";
import { ModifyVerifiedAccessInstanceLoggingConfigurationCommand, } from "./commands/ModifyVerifiedAccessInstanceLoggingConfigurationCommand";
import { ModifyVerifiedAccessTrustProviderCommand, } from "./commands/ModifyVerifiedAccessTrustProviderCommand";
import { ModifyVolumeAttributeCommand, } from "./commands/ModifyVolumeAttributeCommand";
import { ModifyVolumeCommand, } from "./commands/ModifyVolumeCommand";
import { ModifyVpcAttributeCommand, } from "./commands/ModifyVpcAttributeCommand";
import { ModifyVpcEndpointCommand, } from "./commands/ModifyVpcEndpointCommand";
import { ModifyVpcEndpointConnectionNotificationCommand, } from "./commands/ModifyVpcEndpointConnectionNotificationCommand";
import { ModifyVpcEndpointServiceConfigurationCommand, } from "./commands/ModifyVpcEndpointServiceConfigurationCommand";
import { ModifyVpcEndpointServicePayerResponsibilityCommand, } from "./commands/ModifyVpcEndpointServicePayerResponsibilityCommand";
import { ModifyVpcEndpointServicePermissionsCommand, } from "./commands/ModifyVpcEndpointServicePermissionsCommand";
import { ModifyVpcPeeringConnectionOptionsCommand, } from "./commands/ModifyVpcPeeringConnectionOptionsCommand";
import { ModifyVpcTenancyCommand, } from "./commands/ModifyVpcTenancyCommand";
import { ModifyVpnConnectionCommand, } from "./commands/ModifyVpnConnectionCommand";
import { ModifyVpnConnectionOptionsCommand, } from "./commands/ModifyVpnConnectionOptionsCommand";
import { ModifyVpnTunnelCertificateCommand, } from "./commands/ModifyVpnTunnelCertificateCommand";
import { ModifyVpnTunnelOptionsCommand, } from "./commands/ModifyVpnTunnelOptionsCommand";
import { MonitorInstancesCommand, } from "./commands/MonitorInstancesCommand";
import { MoveAddressToVpcCommand, } from "./commands/MoveAddressToVpcCommand";
import { MoveByoipCidrToIpamCommand, } from "./commands/MoveByoipCidrToIpamCommand";
import { ProvisionByoipCidrCommand, } from "./commands/ProvisionByoipCidrCommand";
import { ProvisionIpamPoolCidrCommand, } from "./commands/ProvisionIpamPoolCidrCommand";
import { ProvisionPublicIpv4PoolCidrCommand, } from "./commands/ProvisionPublicIpv4PoolCidrCommand";
import { PurchaseHostReservationCommand, } from "./commands/PurchaseHostReservationCommand";
import { PurchaseReservedInstancesOfferingCommand, } from "./commands/PurchaseReservedInstancesOfferingCommand";
import { PurchaseScheduledInstancesCommand, } from "./commands/PurchaseScheduledInstancesCommand";
import { RebootInstancesCommand, } from "./commands/RebootInstancesCommand";
import { RegisterImageCommand, } from "./commands/RegisterImageCommand";
import { RegisterInstanceEventNotificationAttributesCommand, } from "./commands/RegisterInstanceEventNotificationAttributesCommand";
import { RegisterTransitGatewayMulticastGroupMembersCommand, } from "./commands/RegisterTransitGatewayMulticastGroupMembersCommand";
import { RegisterTransitGatewayMulticastGroupSourcesCommand, } from "./commands/RegisterTransitGatewayMulticastGroupSourcesCommand";
import { RejectTransitGatewayMulticastDomainAssociationsCommand, } from "./commands/RejectTransitGatewayMulticastDomainAssociationsCommand";
import { RejectTransitGatewayPeeringAttachmentCommand, } from "./commands/RejectTransitGatewayPeeringAttachmentCommand";
import { RejectTransitGatewayVpcAttachmentCommand, } from "./commands/RejectTransitGatewayVpcAttachmentCommand";
import { RejectVpcEndpointConnectionsCommand, } from "./commands/RejectVpcEndpointConnectionsCommand";
import { RejectVpcPeeringConnectionCommand, } from "./commands/RejectVpcPeeringConnectionCommand";
import { ReleaseAddressCommand, } from "./commands/ReleaseAddressCommand";
import { ReleaseHostsCommand, } from "./commands/ReleaseHostsCommand";
import { ReleaseIpamPoolAllocationCommand, } from "./commands/ReleaseIpamPoolAllocationCommand";
import { ReplaceIamInstanceProfileAssociationCommand, } from "./commands/ReplaceIamInstanceProfileAssociationCommand";
import { ReplaceNetworkAclAssociationCommand, } from "./commands/ReplaceNetworkAclAssociationCommand";
import { ReplaceNetworkAclEntryCommand, } from "./commands/ReplaceNetworkAclEntryCommand";
import { ReplaceRouteCommand, } from "./commands/ReplaceRouteCommand";
import { ReplaceRouteTableAssociationCommand, } from "./commands/ReplaceRouteTableAssociationCommand";
import { ReplaceTransitGatewayRouteCommand, } from "./commands/ReplaceTransitGatewayRouteCommand";
import { ReportInstanceStatusCommand, } from "./commands/ReportInstanceStatusCommand";
import { RequestSpotFleetCommand, } from "./commands/RequestSpotFleetCommand";
import { RequestSpotInstancesCommand, } from "./commands/RequestSpotInstancesCommand";
import { ResetAddressAttributeCommand, } from "./commands/ResetAddressAttributeCommand";
import { ResetEbsDefaultKmsKeyIdCommand, } from "./commands/ResetEbsDefaultKmsKeyIdCommand";
import { ResetFpgaImageAttributeCommand, } from "./commands/ResetFpgaImageAttributeCommand";
import { ResetImageAttributeCommand, } from "./commands/ResetImageAttributeCommand";
import { ResetInstanceAttributeCommand, } from "./commands/ResetInstanceAttributeCommand";
import { ResetNetworkInterfaceAttributeCommand, } from "./commands/ResetNetworkInterfaceAttributeCommand";
import { ResetSnapshotAttributeCommand, } from "./commands/ResetSnapshotAttributeCommand";
import { RestoreAddressToClassicCommand, } from "./commands/RestoreAddressToClassicCommand";
import { RestoreImageFromRecycleBinCommand, } from "./commands/RestoreImageFromRecycleBinCommand";
import { RestoreManagedPrefixListVersionCommand, } from "./commands/RestoreManagedPrefixListVersionCommand";
import { RestoreSnapshotFromRecycleBinCommand, } from "./commands/RestoreSnapshotFromRecycleBinCommand";
import { RestoreSnapshotTierCommand, } from "./commands/RestoreSnapshotTierCommand";
import { RevokeClientVpnIngressCommand, } from "./commands/RevokeClientVpnIngressCommand";
import { RevokeSecurityGroupEgressCommand, } from "./commands/RevokeSecurityGroupEgressCommand";
import { RevokeSecurityGroupIngressCommand, } from "./commands/RevokeSecurityGroupIngressCommand";
import { RunInstancesCommand, } from "./commands/RunInstancesCommand";
import { RunScheduledInstancesCommand, } from "./commands/RunScheduledInstancesCommand";
import { SearchLocalGatewayRoutesCommand, } from "./commands/SearchLocalGatewayRoutesCommand";
import { SearchTransitGatewayMulticastGroupsCommand, } from "./commands/SearchTransitGatewayMulticastGroupsCommand";
import { SearchTransitGatewayRoutesCommand, } from "./commands/SearchTransitGatewayRoutesCommand";
import { SendDiagnosticInterruptCommand, } from "./commands/SendDiagnosticInterruptCommand";
import { StartInstancesCommand, } from "./commands/StartInstancesCommand";
import { StartNetworkInsightsAccessScopeAnalysisCommand, } from "./commands/StartNetworkInsightsAccessScopeAnalysisCommand";
import { StartNetworkInsightsAnalysisCommand, } from "./commands/StartNetworkInsightsAnalysisCommand";
import { StartVpcEndpointServicePrivateDnsVerificationCommand, } from "./commands/StartVpcEndpointServicePrivateDnsVerificationCommand";
import { StopInstancesCommand, } from "./commands/StopInstancesCommand";
import { TerminateClientVpnConnectionsCommand, } from "./commands/TerminateClientVpnConnectionsCommand";
import { TerminateInstancesCommand, } from "./commands/TerminateInstancesCommand";
import { UnassignIpv6AddressesCommand, } from "./commands/UnassignIpv6AddressesCommand";
import { UnassignPrivateIpAddressesCommand, } from "./commands/UnassignPrivateIpAddressesCommand";
import { UnassignPrivateNatGatewayAddressCommand, } from "./commands/UnassignPrivateNatGatewayAddressCommand";
import { UnmonitorInstancesCommand, } from "./commands/UnmonitorInstancesCommand";
import { UpdateSecurityGroupRuleDescriptionsEgressCommand, } from "./commands/UpdateSecurityGroupRuleDescriptionsEgressCommand";
import { UpdateSecurityGroupRuleDescriptionsIngressCommand, } from "./commands/UpdateSecurityGroupRuleDescriptionsIngressCommand";
import { WithdrawByoipCidrCommand, } from "./commands/WithdrawByoipCidrCommand";
import { EC2Client } from "./EC2Client";
export class EC2 extends EC2Client {
    acceptAddressTransfer(args, optionsOrCb, cb) {
        const command = new AcceptAddressTransferCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    acceptReservedInstancesExchangeQuote(args, optionsOrCb, cb) {
        const command = new AcceptReservedInstancesExchangeQuoteCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    acceptTransitGatewayMulticastDomainAssociations(args, optionsOrCb, cb) {
        const command = new AcceptTransitGatewayMulticastDomainAssociationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    acceptTransitGatewayPeeringAttachment(args, optionsOrCb, cb) {
        const command = new AcceptTransitGatewayPeeringAttachmentCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    acceptTransitGatewayVpcAttachment(args, optionsOrCb, cb) {
        const command = new AcceptTransitGatewayVpcAttachmentCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    acceptVpcEndpointConnections(args, optionsOrCb, cb) {
        const command = new AcceptVpcEndpointConnectionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    acceptVpcPeeringConnection(args, optionsOrCb, cb) {
        const command = new AcceptVpcPeeringConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    advertiseByoipCidr(args, optionsOrCb, cb) {
        const command = new AdvertiseByoipCidrCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    allocateAddress(args, optionsOrCb, cb) {
        const command = new AllocateAddressCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    allocateHosts(args, optionsOrCb, cb) {
        const command = new AllocateHostsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    allocateIpamPoolCidr(args, optionsOrCb, cb) {
        const command = new AllocateIpamPoolCidrCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    applySecurityGroupsToClientVpnTargetNetwork(args, optionsOrCb, cb) {
        const command = new ApplySecurityGroupsToClientVpnTargetNetworkCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    assignIpv6Addresses(args, optionsOrCb, cb) {
        const command = new AssignIpv6AddressesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    assignPrivateIpAddresses(args, optionsOrCb, cb) {
        const command = new AssignPrivateIpAddressesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    assignPrivateNatGatewayAddress(args, optionsOrCb, cb) {
        const command = new AssignPrivateNatGatewayAddressCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    associateAddress(args, optionsOrCb, cb) {
        const command = new AssociateAddressCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    associateClientVpnTargetNetwork(args, optionsOrCb, cb) {
        const command = new AssociateClientVpnTargetNetworkCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    associateDhcpOptions(args, optionsOrCb, cb) {
        const command = new AssociateDhcpOptionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    associateEnclaveCertificateIamRole(args, optionsOrCb, cb) {
        const command = new AssociateEnclaveCertificateIamRoleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    associateIamInstanceProfile(args, optionsOrCb, cb) {
        const command = new AssociateIamInstanceProfileCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    associateInstanceEventWindow(args, optionsOrCb, cb) {
        const command = new AssociateInstanceEventWindowCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    associateIpamResourceDiscovery(args, optionsOrCb, cb) {
        const command = new AssociateIpamResourceDiscoveryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    associateNatGatewayAddress(args, optionsOrCb, cb) {
        const command = new AssociateNatGatewayAddressCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    associateRouteTable(args, optionsOrCb, cb) {
        const command = new AssociateRouteTableCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    associateSubnetCidrBlock(args, optionsOrCb, cb) {
        const command = new AssociateSubnetCidrBlockCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    associateTransitGatewayMulticastDomain(args, optionsOrCb, cb) {
        const command = new AssociateTransitGatewayMulticastDomainCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    associateTransitGatewayPolicyTable(args, optionsOrCb, cb) {
        const command = new AssociateTransitGatewayPolicyTableCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    associateTransitGatewayRouteTable(args, optionsOrCb, cb) {
        const command = new AssociateTransitGatewayRouteTableCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    associateTrunkInterface(args, optionsOrCb, cb) {
        const command = new AssociateTrunkInterfaceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    associateVpcCidrBlock(args, optionsOrCb, cb) {
        const command = new AssociateVpcCidrBlockCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    attachClassicLinkVpc(args, optionsOrCb, cb) {
        const command = new AttachClassicLinkVpcCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    attachInternetGateway(args, optionsOrCb, cb) {
        const command = new AttachInternetGatewayCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    attachNetworkInterface(args, optionsOrCb, cb) {
        const command = new AttachNetworkInterfaceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    attachVerifiedAccessTrustProvider(args, optionsOrCb, cb) {
        const command = new AttachVerifiedAccessTrustProviderCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    attachVolume(args, optionsOrCb, cb) {
        const command = new AttachVolumeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    attachVpnGateway(args, optionsOrCb, cb) {
        const command = new AttachVpnGatewayCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    authorizeClientVpnIngress(args, optionsOrCb, cb) {
        const command = new AuthorizeClientVpnIngressCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    authorizeSecurityGroupEgress(args, optionsOrCb, cb) {
        const command = new AuthorizeSecurityGroupEgressCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    authorizeSecurityGroupIngress(args, optionsOrCb, cb) {
        const command = new AuthorizeSecurityGroupIngressCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    bundleInstance(args, optionsOrCb, cb) {
        const command = new BundleInstanceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    cancelBundleTask(args, optionsOrCb, cb) {
        const command = new CancelBundleTaskCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    cancelCapacityReservation(args, optionsOrCb, cb) {
        const command = new CancelCapacityReservationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    cancelCapacityReservationFleets(args, optionsOrCb, cb) {
        const command = new CancelCapacityReservationFleetsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    cancelConversionTask(args, optionsOrCb, cb) {
        const command = new CancelConversionTaskCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    cancelExportTask(args, optionsOrCb, cb) {
        const command = new CancelExportTaskCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    cancelImageLaunchPermission(args, optionsOrCb, cb) {
        const command = new CancelImageLaunchPermissionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    cancelImportTask(args, optionsOrCb, cb) {
        const command = new CancelImportTaskCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    cancelReservedInstancesListing(args, optionsOrCb, cb) {
        const command = new CancelReservedInstancesListingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    cancelSpotFleetRequests(args, optionsOrCb, cb) {
        const command = new CancelSpotFleetRequestsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    cancelSpotInstanceRequests(args, optionsOrCb, cb) {
        const command = new CancelSpotInstanceRequestsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    confirmProductInstance(args, optionsOrCb, cb) {
        const command = new ConfirmProductInstanceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    copyFpgaImage(args, optionsOrCb, cb) {
        const command = new CopyFpgaImageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    copyImage(args, optionsOrCb, cb) {
        const command = new CopyImageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    copySnapshot(args, optionsOrCb, cb) {
        const command = new CopySnapshotCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createCapacityReservation(args, optionsOrCb, cb) {
        const command = new CreateCapacityReservationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createCapacityReservationFleet(args, optionsOrCb, cb) {
        const command = new CreateCapacityReservationFleetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createCarrierGateway(args, optionsOrCb, cb) {
        const command = new CreateCarrierGatewayCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createClientVpnEndpoint(args, optionsOrCb, cb) {
        const command = new CreateClientVpnEndpointCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createClientVpnRoute(args, optionsOrCb, cb) {
        const command = new CreateClientVpnRouteCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createCoipCidr(args, optionsOrCb, cb) {
        const command = new CreateCoipCidrCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createCoipPool(args, optionsOrCb, cb) {
        const command = new CreateCoipPoolCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createCustomerGateway(args, optionsOrCb, cb) {
        const command = new CreateCustomerGatewayCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createDefaultSubnet(args, optionsOrCb, cb) {
        const command = new CreateDefaultSubnetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createDefaultVpc(args, optionsOrCb, cb) {
        const command = new CreateDefaultVpcCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createDhcpOptions(args, optionsOrCb, cb) {
        const command = new CreateDhcpOptionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createEgressOnlyInternetGateway(args, optionsOrCb, cb) {
        const command = new CreateEgressOnlyInternetGatewayCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createFleet(args, optionsOrCb, cb) {
        const command = new CreateFleetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createFlowLogs(args, optionsOrCb, cb) {
        const command = new CreateFlowLogsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createFpgaImage(args, optionsOrCb, cb) {
        const command = new CreateFpgaImageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createImage(args, optionsOrCb, cb) {
        const command = new CreateImageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createInstanceEventWindow(args, optionsOrCb, cb) {
        const command = new CreateInstanceEventWindowCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createInstanceExportTask(args, optionsOrCb, cb) {
        const command = new CreateInstanceExportTaskCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createInternetGateway(args, optionsOrCb, cb) {
        const command = new CreateInternetGatewayCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createIpam(args, optionsOrCb, cb) {
        const command = new CreateIpamCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createIpamPool(args, optionsOrCb, cb) {
        const command = new CreateIpamPoolCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createIpamResourceDiscovery(args, optionsOrCb, cb) {
        const command = new CreateIpamResourceDiscoveryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createIpamScope(args, optionsOrCb, cb) {
        const command = new CreateIpamScopeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createKeyPair(args, optionsOrCb, cb) {
        const command = new CreateKeyPairCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createLaunchTemplate(args, optionsOrCb, cb) {
        const command = new CreateLaunchTemplateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createLaunchTemplateVersion(args, optionsOrCb, cb) {
        const command = new CreateLaunchTemplateVersionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createLocalGatewayRoute(args, optionsOrCb, cb) {
        const command = new CreateLocalGatewayRouteCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createLocalGatewayRouteTable(args, optionsOrCb, cb) {
        const command = new CreateLocalGatewayRouteTableCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createLocalGatewayRouteTableVirtualInterfaceGroupAssociation(args, optionsOrCb, cb) {
        const command = new CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createLocalGatewayRouteTableVpcAssociation(args, optionsOrCb, cb) {
        const command = new CreateLocalGatewayRouteTableVpcAssociationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createManagedPrefixList(args, optionsOrCb, cb) {
        const command = new CreateManagedPrefixListCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createNatGateway(args, optionsOrCb, cb) {
        const command = new CreateNatGatewayCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createNetworkAcl(args, optionsOrCb, cb) {
        const command = new CreateNetworkAclCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createNetworkAclEntry(args, optionsOrCb, cb) {
        const command = new CreateNetworkAclEntryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createNetworkInsightsAccessScope(args, optionsOrCb, cb) {
        const command = new CreateNetworkInsightsAccessScopeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createNetworkInsightsPath(args, optionsOrCb, cb) {
        const command = new CreateNetworkInsightsPathCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createNetworkInterface(args, optionsOrCb, cb) {
        const command = new CreateNetworkInterfaceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createNetworkInterfacePermission(args, optionsOrCb, cb) {
        const command = new CreateNetworkInterfacePermissionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createPlacementGroup(args, optionsOrCb, cb) {
        const command = new CreatePlacementGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createPublicIpv4Pool(args, optionsOrCb, cb) {
        const command = new CreatePublicIpv4PoolCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createReplaceRootVolumeTask(args, optionsOrCb, cb) {
        const command = new CreateReplaceRootVolumeTaskCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createReservedInstancesListing(args, optionsOrCb, cb) {
        const command = new CreateReservedInstancesListingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createRestoreImageTask(args, optionsOrCb, cb) {
        const command = new CreateRestoreImageTaskCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createRoute(args, optionsOrCb, cb) {
        const command = new CreateRouteCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createRouteTable(args, optionsOrCb, cb) {
        const command = new CreateRouteTableCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createSecurityGroup(args, optionsOrCb, cb) {
        const command = new CreateSecurityGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createSnapshot(args, optionsOrCb, cb) {
        const command = new CreateSnapshotCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createSnapshots(args, optionsOrCb, cb) {
        const command = new CreateSnapshotsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createSpotDatafeedSubscription(args, optionsOrCb, cb) {
        const command = new CreateSpotDatafeedSubscriptionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createStoreImageTask(args, optionsOrCb, cb) {
        const command = new CreateStoreImageTaskCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createSubnet(args, optionsOrCb, cb) {
        const command = new CreateSubnetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createSubnetCidrReservation(args, optionsOrCb, cb) {
        const command = new CreateSubnetCidrReservationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createTags(args, optionsOrCb, cb) {
        const command = new CreateTagsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createTrafficMirrorFilter(args, optionsOrCb, cb) {
        const command = new CreateTrafficMirrorFilterCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createTrafficMirrorFilterRule(args, optionsOrCb, cb) {
        const command = new CreateTrafficMirrorFilterRuleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createTrafficMirrorSession(args, optionsOrCb, cb) {
        const command = new CreateTrafficMirrorSessionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createTrafficMirrorTarget(args, optionsOrCb, cb) {
        const command = new CreateTrafficMirrorTargetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createTransitGateway(args, optionsOrCb, cb) {
        const command = new CreateTransitGatewayCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createTransitGatewayConnect(args, optionsOrCb, cb) {
        const command = new CreateTransitGatewayConnectCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createTransitGatewayConnectPeer(args, optionsOrCb, cb) {
        const command = new CreateTransitGatewayConnectPeerCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createTransitGatewayMulticastDomain(args, optionsOrCb, cb) {
        const command = new CreateTransitGatewayMulticastDomainCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createTransitGatewayPeeringAttachment(args, optionsOrCb, cb) {
        const command = new CreateTransitGatewayPeeringAttachmentCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createTransitGatewayPolicyTable(args, optionsOrCb, cb) {
        const command = new CreateTransitGatewayPolicyTableCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createTransitGatewayPrefixListReference(args, optionsOrCb, cb) {
        const command = new CreateTransitGatewayPrefixListReferenceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createTransitGatewayRoute(args, optionsOrCb, cb) {
        const command = new CreateTransitGatewayRouteCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createTransitGatewayRouteTable(args, optionsOrCb, cb) {
        const command = new CreateTransitGatewayRouteTableCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createTransitGatewayRouteTableAnnouncement(args, optionsOrCb, cb) {
        const command = new CreateTransitGatewayRouteTableAnnouncementCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createTransitGatewayVpcAttachment(args, optionsOrCb, cb) {
        const command = new CreateTransitGatewayVpcAttachmentCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createVerifiedAccessEndpoint(args, optionsOrCb, cb) {
        const command = new CreateVerifiedAccessEndpointCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createVerifiedAccessGroup(args, optionsOrCb, cb) {
        const command = new CreateVerifiedAccessGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createVerifiedAccessInstance(args, optionsOrCb, cb) {
        const command = new CreateVerifiedAccessInstanceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createVerifiedAccessTrustProvider(args, optionsOrCb, cb) {
        const command = new CreateVerifiedAccessTrustProviderCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createVolume(args, optionsOrCb, cb) {
        const command = new CreateVolumeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createVpc(args, optionsOrCb, cb) {
        const command = new CreateVpcCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createVpcEndpoint(args, optionsOrCb, cb) {
        const command = new CreateVpcEndpointCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createVpcEndpointConnectionNotification(args, optionsOrCb, cb) {
        const command = new CreateVpcEndpointConnectionNotificationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createVpcEndpointServiceConfiguration(args, optionsOrCb, cb) {
        const command = new CreateVpcEndpointServiceConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createVpcPeeringConnection(args, optionsOrCb, cb) {
        const command = new CreateVpcPeeringConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createVpnConnection(args, optionsOrCb, cb) {
        const command = new CreateVpnConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createVpnConnectionRoute(args, optionsOrCb, cb) {
        const command = new CreateVpnConnectionRouteCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createVpnGateway(args, optionsOrCb, cb) {
        const command = new CreateVpnGatewayCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteCarrierGateway(args, optionsOrCb, cb) {
        const command = new DeleteCarrierGatewayCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteClientVpnEndpoint(args, optionsOrCb, cb) {
        const command = new DeleteClientVpnEndpointCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteClientVpnRoute(args, optionsOrCb, cb) {
        const command = new DeleteClientVpnRouteCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteCoipCidr(args, optionsOrCb, cb) {
        const command = new DeleteCoipCidrCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteCoipPool(args, optionsOrCb, cb) {
        const command = new DeleteCoipPoolCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteCustomerGateway(args, optionsOrCb, cb) {
        const command = new DeleteCustomerGatewayCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteDhcpOptions(args, optionsOrCb, cb) {
        const command = new DeleteDhcpOptionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteEgressOnlyInternetGateway(args, optionsOrCb, cb) {
        const command = new DeleteEgressOnlyInternetGatewayCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteFleets(args, optionsOrCb, cb) {
        const command = new DeleteFleetsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteFlowLogs(args, optionsOrCb, cb) {
        const command = new DeleteFlowLogsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteFpgaImage(args, optionsOrCb, cb) {
        const command = new DeleteFpgaImageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteInstanceEventWindow(args, optionsOrCb, cb) {
        const command = new DeleteInstanceEventWindowCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteInternetGateway(args, optionsOrCb, cb) {
        const command = new DeleteInternetGatewayCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteIpam(args, optionsOrCb, cb) {
        const command = new DeleteIpamCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteIpamPool(args, optionsOrCb, cb) {
        const command = new DeleteIpamPoolCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteIpamResourceDiscovery(args, optionsOrCb, cb) {
        const command = new DeleteIpamResourceDiscoveryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteIpamScope(args, optionsOrCb, cb) {
        const command = new DeleteIpamScopeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteKeyPair(args, optionsOrCb, cb) {
        const command = new DeleteKeyPairCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteLaunchTemplate(args, optionsOrCb, cb) {
        const command = new DeleteLaunchTemplateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteLaunchTemplateVersions(args, optionsOrCb, cb) {
        const command = new DeleteLaunchTemplateVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteLocalGatewayRoute(args, optionsOrCb, cb) {
        const command = new DeleteLocalGatewayRouteCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteLocalGatewayRouteTable(args, optionsOrCb, cb) {
        const command = new DeleteLocalGatewayRouteTableCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation(args, optionsOrCb, cb) {
        const command = new DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteLocalGatewayRouteTableVpcAssociation(args, optionsOrCb, cb) {
        const command = new DeleteLocalGatewayRouteTableVpcAssociationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteManagedPrefixList(args, optionsOrCb, cb) {
        const command = new DeleteManagedPrefixListCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteNatGateway(args, optionsOrCb, cb) {
        const command = new DeleteNatGatewayCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteNetworkAcl(args, optionsOrCb, cb) {
        const command = new DeleteNetworkAclCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteNetworkAclEntry(args, optionsOrCb, cb) {
        const command = new DeleteNetworkAclEntryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteNetworkInsightsAccessScope(args, optionsOrCb, cb) {
        const command = new DeleteNetworkInsightsAccessScopeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteNetworkInsightsAccessScopeAnalysis(args, optionsOrCb, cb) {
        const command = new DeleteNetworkInsightsAccessScopeAnalysisCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteNetworkInsightsAnalysis(args, optionsOrCb, cb) {
        const command = new DeleteNetworkInsightsAnalysisCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteNetworkInsightsPath(args, optionsOrCb, cb) {
        const command = new DeleteNetworkInsightsPathCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteNetworkInterface(args, optionsOrCb, cb) {
        const command = new DeleteNetworkInterfaceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteNetworkInterfacePermission(args, optionsOrCb, cb) {
        const command = new DeleteNetworkInterfacePermissionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deletePlacementGroup(args, optionsOrCb, cb) {
        const command = new DeletePlacementGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deletePublicIpv4Pool(args, optionsOrCb, cb) {
        const command = new DeletePublicIpv4PoolCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteQueuedReservedInstances(args, optionsOrCb, cb) {
        const command = new DeleteQueuedReservedInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteRoute(args, optionsOrCb, cb) {
        const command = new DeleteRouteCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteRouteTable(args, optionsOrCb, cb) {
        const command = new DeleteRouteTableCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteSecurityGroup(args, optionsOrCb, cb) {
        const command = new DeleteSecurityGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteSnapshot(args, optionsOrCb, cb) {
        const command = new DeleteSnapshotCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteSpotDatafeedSubscription(args, optionsOrCb, cb) {
        const command = new DeleteSpotDatafeedSubscriptionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteSubnet(args, optionsOrCb, cb) {
        const command = new DeleteSubnetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteSubnetCidrReservation(args, optionsOrCb, cb) {
        const command = new DeleteSubnetCidrReservationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteTags(args, optionsOrCb, cb) {
        const command = new DeleteTagsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteTrafficMirrorFilter(args, optionsOrCb, cb) {
        const command = new DeleteTrafficMirrorFilterCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteTrafficMirrorFilterRule(args, optionsOrCb, cb) {
        const command = new DeleteTrafficMirrorFilterRuleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteTrafficMirrorSession(args, optionsOrCb, cb) {
        const command = new DeleteTrafficMirrorSessionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteTrafficMirrorTarget(args, optionsOrCb, cb) {
        const command = new DeleteTrafficMirrorTargetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteTransitGateway(args, optionsOrCb, cb) {
        const command = new DeleteTransitGatewayCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteTransitGatewayConnect(args, optionsOrCb, cb) {
        const command = new DeleteTransitGatewayConnectCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteTransitGatewayConnectPeer(args, optionsOrCb, cb) {
        const command = new DeleteTransitGatewayConnectPeerCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteTransitGatewayMulticastDomain(args, optionsOrCb, cb) {
        const command = new DeleteTransitGatewayMulticastDomainCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteTransitGatewayPeeringAttachment(args, optionsOrCb, cb) {
        const command = new DeleteTransitGatewayPeeringAttachmentCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteTransitGatewayPolicyTable(args, optionsOrCb, cb) {
        const command = new DeleteTransitGatewayPolicyTableCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteTransitGatewayPrefixListReference(args, optionsOrCb, cb) {
        const command = new DeleteTransitGatewayPrefixListReferenceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteTransitGatewayRoute(args, optionsOrCb, cb) {
        const command = new DeleteTransitGatewayRouteCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteTransitGatewayRouteTable(args, optionsOrCb, cb) {
        const command = new DeleteTransitGatewayRouteTableCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteTransitGatewayRouteTableAnnouncement(args, optionsOrCb, cb) {
        const command = new DeleteTransitGatewayRouteTableAnnouncementCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteTransitGatewayVpcAttachment(args, optionsOrCb, cb) {
        const command = new DeleteTransitGatewayVpcAttachmentCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteVerifiedAccessEndpoint(args, optionsOrCb, cb) {
        const command = new DeleteVerifiedAccessEndpointCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteVerifiedAccessGroup(args, optionsOrCb, cb) {
        const command = new DeleteVerifiedAccessGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteVerifiedAccessInstance(args, optionsOrCb, cb) {
        const command = new DeleteVerifiedAccessInstanceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteVerifiedAccessTrustProvider(args, optionsOrCb, cb) {
        const command = new DeleteVerifiedAccessTrustProviderCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteVolume(args, optionsOrCb, cb) {
        const command = new DeleteVolumeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteVpc(args, optionsOrCb, cb) {
        const command = new DeleteVpcCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteVpcEndpointConnectionNotifications(args, optionsOrCb, cb) {
        const command = new DeleteVpcEndpointConnectionNotificationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteVpcEndpoints(args, optionsOrCb, cb) {
        const command = new DeleteVpcEndpointsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteVpcEndpointServiceConfigurations(args, optionsOrCb, cb) {
        const command = new DeleteVpcEndpointServiceConfigurationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteVpcPeeringConnection(args, optionsOrCb, cb) {
        const command = new DeleteVpcPeeringConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteVpnConnection(args, optionsOrCb, cb) {
        const command = new DeleteVpnConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteVpnConnectionRoute(args, optionsOrCb, cb) {
        const command = new DeleteVpnConnectionRouteCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteVpnGateway(args, optionsOrCb, cb) {
        const command = new DeleteVpnGatewayCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deprovisionByoipCidr(args, optionsOrCb, cb) {
        const command = new DeprovisionByoipCidrCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deprovisionIpamPoolCidr(args, optionsOrCb, cb) {
        const command = new DeprovisionIpamPoolCidrCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deprovisionPublicIpv4PoolCidr(args, optionsOrCb, cb) {
        const command = new DeprovisionPublicIpv4PoolCidrCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deregisterImage(args, optionsOrCb, cb) {
        const command = new DeregisterImageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deregisterInstanceEventNotificationAttributes(args, optionsOrCb, cb) {
        const command = new DeregisterInstanceEventNotificationAttributesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deregisterTransitGatewayMulticastGroupMembers(args, optionsOrCb, cb) {
        const command = new DeregisterTransitGatewayMulticastGroupMembersCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deregisterTransitGatewayMulticastGroupSources(args, optionsOrCb, cb) {
        const command = new DeregisterTransitGatewayMulticastGroupSourcesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeAccountAttributes(args, optionsOrCb, cb) {
        const command = new DescribeAccountAttributesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeAddresses(args, optionsOrCb, cb) {
        const command = new DescribeAddressesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeAddressesAttribute(args, optionsOrCb, cb) {
        const command = new DescribeAddressesAttributeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeAddressTransfers(args, optionsOrCb, cb) {
        const command = new DescribeAddressTransfersCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeAggregateIdFormat(args, optionsOrCb, cb) {
        const command = new DescribeAggregateIdFormatCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeAvailabilityZones(args, optionsOrCb, cb) {
        const command = new DescribeAvailabilityZonesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeAwsNetworkPerformanceMetricSubscriptions(args, optionsOrCb, cb) {
        const command = new DescribeAwsNetworkPerformanceMetricSubscriptionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeBundleTasks(args, optionsOrCb, cb) {
        const command = new DescribeBundleTasksCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeByoipCidrs(args, optionsOrCb, cb) {
        const command = new DescribeByoipCidrsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeCapacityReservationFleets(args, optionsOrCb, cb) {
        const command = new DescribeCapacityReservationFleetsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeCapacityReservations(args, optionsOrCb, cb) {
        const command = new DescribeCapacityReservationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeCarrierGateways(args, optionsOrCb, cb) {
        const command = new DescribeCarrierGatewaysCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeClassicLinkInstances(args, optionsOrCb, cb) {
        const command = new DescribeClassicLinkInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeClientVpnAuthorizationRules(args, optionsOrCb, cb) {
        const command = new DescribeClientVpnAuthorizationRulesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeClientVpnConnections(args, optionsOrCb, cb) {
        const command = new DescribeClientVpnConnectionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeClientVpnEndpoints(args, optionsOrCb, cb) {
        const command = new DescribeClientVpnEndpointsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeClientVpnRoutes(args, optionsOrCb, cb) {
        const command = new DescribeClientVpnRoutesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeClientVpnTargetNetworks(args, optionsOrCb, cb) {
        const command = new DescribeClientVpnTargetNetworksCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeCoipPools(args, optionsOrCb, cb) {
        const command = new DescribeCoipPoolsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeConversionTasks(args, optionsOrCb, cb) {
        const command = new DescribeConversionTasksCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeCustomerGateways(args, optionsOrCb, cb) {
        const command = new DescribeCustomerGatewaysCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeDhcpOptions(args, optionsOrCb, cb) {
        const command = new DescribeDhcpOptionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeEgressOnlyInternetGateways(args, optionsOrCb, cb) {
        const command = new DescribeEgressOnlyInternetGatewaysCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeElasticGpus(args, optionsOrCb, cb) {
        const command = new DescribeElasticGpusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeExportImageTasks(args, optionsOrCb, cb) {
        const command = new DescribeExportImageTasksCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeExportTasks(args, optionsOrCb, cb) {
        const command = new DescribeExportTasksCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeFastLaunchImages(args, optionsOrCb, cb) {
        const command = new DescribeFastLaunchImagesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeFastSnapshotRestores(args, optionsOrCb, cb) {
        const command = new DescribeFastSnapshotRestoresCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeFleetHistory(args, optionsOrCb, cb) {
        const command = new DescribeFleetHistoryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeFleetInstances(args, optionsOrCb, cb) {
        const command = new DescribeFleetInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeFleets(args, optionsOrCb, cb) {
        const command = new DescribeFleetsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeFlowLogs(args, optionsOrCb, cb) {
        const command = new DescribeFlowLogsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeFpgaImageAttribute(args, optionsOrCb, cb) {
        const command = new DescribeFpgaImageAttributeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeFpgaImages(args, optionsOrCb, cb) {
        const command = new DescribeFpgaImagesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeHostReservationOfferings(args, optionsOrCb, cb) {
        const command = new DescribeHostReservationOfferingsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeHostReservations(args, optionsOrCb, cb) {
        const command = new DescribeHostReservationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeHosts(args, optionsOrCb, cb) {
        const command = new DescribeHostsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeIamInstanceProfileAssociations(args, optionsOrCb, cb) {
        const command = new DescribeIamInstanceProfileAssociationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeIdentityIdFormat(args, optionsOrCb, cb) {
        const command = new DescribeIdentityIdFormatCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeIdFormat(args, optionsOrCb, cb) {
        const command = new DescribeIdFormatCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeImageAttribute(args, optionsOrCb, cb) {
        const command = new DescribeImageAttributeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeImages(args, optionsOrCb, cb) {
        const command = new DescribeImagesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeImportImageTasks(args, optionsOrCb, cb) {
        const command = new DescribeImportImageTasksCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeImportSnapshotTasks(args, optionsOrCb, cb) {
        const command = new DescribeImportSnapshotTasksCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeInstanceAttribute(args, optionsOrCb, cb) {
        const command = new DescribeInstanceAttributeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeInstanceCreditSpecifications(args, optionsOrCb, cb) {
        const command = new DescribeInstanceCreditSpecificationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeInstanceEventNotificationAttributes(args, optionsOrCb, cb) {
        const command = new DescribeInstanceEventNotificationAttributesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeInstanceEventWindows(args, optionsOrCb, cb) {
        const command = new DescribeInstanceEventWindowsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeInstances(args, optionsOrCb, cb) {
        const command = new DescribeInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeInstanceStatus(args, optionsOrCb, cb) {
        const command = new DescribeInstanceStatusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeInstanceTypeOfferings(args, optionsOrCb, cb) {
        const command = new DescribeInstanceTypeOfferingsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeInstanceTypes(args, optionsOrCb, cb) {
        const command = new DescribeInstanceTypesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeInternetGateways(args, optionsOrCb, cb) {
        const command = new DescribeInternetGatewaysCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeIpamPools(args, optionsOrCb, cb) {
        const command = new DescribeIpamPoolsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeIpamResourceDiscoveries(args, optionsOrCb, cb) {
        const command = new DescribeIpamResourceDiscoveriesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeIpamResourceDiscoveryAssociations(args, optionsOrCb, cb) {
        const command = new DescribeIpamResourceDiscoveryAssociationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeIpams(args, optionsOrCb, cb) {
        const command = new DescribeIpamsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeIpamScopes(args, optionsOrCb, cb) {
        const command = new DescribeIpamScopesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeIpv6Pools(args, optionsOrCb, cb) {
        const command = new DescribeIpv6PoolsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeKeyPairs(args, optionsOrCb, cb) {
        const command = new DescribeKeyPairsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeLaunchTemplates(args, optionsOrCb, cb) {
        const command = new DescribeLaunchTemplatesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeLaunchTemplateVersions(args, optionsOrCb, cb) {
        const command = new DescribeLaunchTemplateVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeLocalGatewayRouteTables(args, optionsOrCb, cb) {
        const command = new DescribeLocalGatewayRouteTablesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(args, optionsOrCb, cb) {
        const command = new DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeLocalGatewayRouteTableVpcAssociations(args, optionsOrCb, cb) {
        const command = new DescribeLocalGatewayRouteTableVpcAssociationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeLocalGateways(args, optionsOrCb, cb) {
        const command = new DescribeLocalGatewaysCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeLocalGatewayVirtualInterfaceGroups(args, optionsOrCb, cb) {
        const command = new DescribeLocalGatewayVirtualInterfaceGroupsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeLocalGatewayVirtualInterfaces(args, optionsOrCb, cb) {
        const command = new DescribeLocalGatewayVirtualInterfacesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeManagedPrefixLists(args, optionsOrCb, cb) {
        const command = new DescribeManagedPrefixListsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeMovingAddresses(args, optionsOrCb, cb) {
        const command = new DescribeMovingAddressesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeNatGateways(args, optionsOrCb, cb) {
        const command = new DescribeNatGatewaysCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeNetworkAcls(args, optionsOrCb, cb) {
        const command = new DescribeNetworkAclsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeNetworkInsightsAccessScopeAnalyses(args, optionsOrCb, cb) {
        const command = new DescribeNetworkInsightsAccessScopeAnalysesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeNetworkInsightsAccessScopes(args, optionsOrCb, cb) {
        const command = new DescribeNetworkInsightsAccessScopesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeNetworkInsightsAnalyses(args, optionsOrCb, cb) {
        const command = new DescribeNetworkInsightsAnalysesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeNetworkInsightsPaths(args, optionsOrCb, cb) {
        const command = new DescribeNetworkInsightsPathsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeNetworkInterfaceAttribute(args, optionsOrCb, cb) {
        const command = new DescribeNetworkInterfaceAttributeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeNetworkInterfacePermissions(args, optionsOrCb, cb) {
        const command = new DescribeNetworkInterfacePermissionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeNetworkInterfaces(args, optionsOrCb, cb) {
        const command = new DescribeNetworkInterfacesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describePlacementGroups(args, optionsOrCb, cb) {
        const command = new DescribePlacementGroupsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describePrefixLists(args, optionsOrCb, cb) {
        const command = new DescribePrefixListsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describePrincipalIdFormat(args, optionsOrCb, cb) {
        const command = new DescribePrincipalIdFormatCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describePublicIpv4Pools(args, optionsOrCb, cb) {
        const command = new DescribePublicIpv4PoolsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeRegions(args, optionsOrCb, cb) {
        const command = new DescribeRegionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeReplaceRootVolumeTasks(args, optionsOrCb, cb) {
        const command = new DescribeReplaceRootVolumeTasksCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeReservedInstances(args, optionsOrCb, cb) {
        const command = new DescribeReservedInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeReservedInstancesListings(args, optionsOrCb, cb) {
        const command = new DescribeReservedInstancesListingsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeReservedInstancesModifications(args, optionsOrCb, cb) {
        const command = new DescribeReservedInstancesModificationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeReservedInstancesOfferings(args, optionsOrCb, cb) {
        const command = new DescribeReservedInstancesOfferingsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeRouteTables(args, optionsOrCb, cb) {
        const command = new DescribeRouteTablesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeScheduledInstanceAvailability(args, optionsOrCb, cb) {
        const command = new DescribeScheduledInstanceAvailabilityCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeScheduledInstances(args, optionsOrCb, cb) {
        const command = new DescribeScheduledInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeSecurityGroupReferences(args, optionsOrCb, cb) {
        const command = new DescribeSecurityGroupReferencesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeSecurityGroupRules(args, optionsOrCb, cb) {
        const command = new DescribeSecurityGroupRulesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeSecurityGroups(args, optionsOrCb, cb) {
        const command = new DescribeSecurityGroupsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeSnapshotAttribute(args, optionsOrCb, cb) {
        const command = new DescribeSnapshotAttributeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeSnapshots(args, optionsOrCb, cb) {
        const command = new DescribeSnapshotsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeSnapshotTierStatus(args, optionsOrCb, cb) {
        const command = new DescribeSnapshotTierStatusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeSpotDatafeedSubscription(args, optionsOrCb, cb) {
        const command = new DescribeSpotDatafeedSubscriptionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeSpotFleetInstances(args, optionsOrCb, cb) {
        const command = new DescribeSpotFleetInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeSpotFleetRequestHistory(args, optionsOrCb, cb) {
        const command = new DescribeSpotFleetRequestHistoryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeSpotFleetRequests(args, optionsOrCb, cb) {
        const command = new DescribeSpotFleetRequestsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeSpotInstanceRequests(args, optionsOrCb, cb) {
        const command = new DescribeSpotInstanceRequestsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeSpotPriceHistory(args, optionsOrCb, cb) {
        const command = new DescribeSpotPriceHistoryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeStaleSecurityGroups(args, optionsOrCb, cb) {
        const command = new DescribeStaleSecurityGroupsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeStoreImageTasks(args, optionsOrCb, cb) {
        const command = new DescribeStoreImageTasksCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeSubnets(args, optionsOrCb, cb) {
        const command = new DescribeSubnetsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeTags(args, optionsOrCb, cb) {
        const command = new DescribeTagsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeTrafficMirrorFilters(args, optionsOrCb, cb) {
        const command = new DescribeTrafficMirrorFiltersCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeTrafficMirrorSessions(args, optionsOrCb, cb) {
        const command = new DescribeTrafficMirrorSessionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeTrafficMirrorTargets(args, optionsOrCb, cb) {
        const command = new DescribeTrafficMirrorTargetsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeTransitGatewayAttachments(args, optionsOrCb, cb) {
        const command = new DescribeTransitGatewayAttachmentsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeTransitGatewayConnectPeers(args, optionsOrCb, cb) {
        const command = new DescribeTransitGatewayConnectPeersCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeTransitGatewayConnects(args, optionsOrCb, cb) {
        const command = new DescribeTransitGatewayConnectsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeTransitGatewayMulticastDomains(args, optionsOrCb, cb) {
        const command = new DescribeTransitGatewayMulticastDomainsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeTransitGatewayPeeringAttachments(args, optionsOrCb, cb) {
        const command = new DescribeTransitGatewayPeeringAttachmentsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeTransitGatewayPolicyTables(args, optionsOrCb, cb) {
        const command = new DescribeTransitGatewayPolicyTablesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeTransitGatewayRouteTableAnnouncements(args, optionsOrCb, cb) {
        const command = new DescribeTransitGatewayRouteTableAnnouncementsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeTransitGatewayRouteTables(args, optionsOrCb, cb) {
        const command = new DescribeTransitGatewayRouteTablesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeTransitGateways(args, optionsOrCb, cb) {
        const command = new DescribeTransitGatewaysCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeTransitGatewayVpcAttachments(args, optionsOrCb, cb) {
        const command = new DescribeTransitGatewayVpcAttachmentsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeTrunkInterfaceAssociations(args, optionsOrCb, cb) {
        const command = new DescribeTrunkInterfaceAssociationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeVerifiedAccessEndpoints(args, optionsOrCb, cb) {
        const command = new DescribeVerifiedAccessEndpointsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeVerifiedAccessGroups(args, optionsOrCb, cb) {
        const command = new DescribeVerifiedAccessGroupsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeVerifiedAccessInstanceLoggingConfigurations(args, optionsOrCb, cb) {
        const command = new DescribeVerifiedAccessInstanceLoggingConfigurationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeVerifiedAccessInstances(args, optionsOrCb, cb) {
        const command = new DescribeVerifiedAccessInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeVerifiedAccessTrustProviders(args, optionsOrCb, cb) {
        const command = new DescribeVerifiedAccessTrustProvidersCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeVolumeAttribute(args, optionsOrCb, cb) {
        const command = new DescribeVolumeAttributeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeVolumes(args, optionsOrCb, cb) {
        const command = new DescribeVolumesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeVolumesModifications(args, optionsOrCb, cb) {
        const command = new DescribeVolumesModificationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeVolumeStatus(args, optionsOrCb, cb) {
        const command = new DescribeVolumeStatusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeVpcAttribute(args, optionsOrCb, cb) {
        const command = new DescribeVpcAttributeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeVpcClassicLink(args, optionsOrCb, cb) {
        const command = new DescribeVpcClassicLinkCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeVpcClassicLinkDnsSupport(args, optionsOrCb, cb) {
        const command = new DescribeVpcClassicLinkDnsSupportCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeVpcEndpointConnectionNotifications(args, optionsOrCb, cb) {
        const command = new DescribeVpcEndpointConnectionNotificationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeVpcEndpointConnections(args, optionsOrCb, cb) {
        const command = new DescribeVpcEndpointConnectionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeVpcEndpoints(args, optionsOrCb, cb) {
        const command = new DescribeVpcEndpointsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeVpcEndpointServiceConfigurations(args, optionsOrCb, cb) {
        const command = new DescribeVpcEndpointServiceConfigurationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeVpcEndpointServicePermissions(args, optionsOrCb, cb) {
        const command = new DescribeVpcEndpointServicePermissionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeVpcEndpointServices(args, optionsOrCb, cb) {
        const command = new DescribeVpcEndpointServicesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeVpcPeeringConnections(args, optionsOrCb, cb) {
        const command = new DescribeVpcPeeringConnectionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeVpcs(args, optionsOrCb, cb) {
        const command = new DescribeVpcsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeVpnConnections(args, optionsOrCb, cb) {
        const command = new DescribeVpnConnectionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeVpnGateways(args, optionsOrCb, cb) {
        const command = new DescribeVpnGatewaysCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    detachClassicLinkVpc(args, optionsOrCb, cb) {
        const command = new DetachClassicLinkVpcCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    detachInternetGateway(args, optionsOrCb, cb) {
        const command = new DetachInternetGatewayCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    detachNetworkInterface(args, optionsOrCb, cb) {
        const command = new DetachNetworkInterfaceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    detachVerifiedAccessTrustProvider(args, optionsOrCb, cb) {
        const command = new DetachVerifiedAccessTrustProviderCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    detachVolume(args, optionsOrCb, cb) {
        const command = new DetachVolumeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    detachVpnGateway(args, optionsOrCb, cb) {
        const command = new DetachVpnGatewayCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    disableAddressTransfer(args, optionsOrCb, cb) {
        const command = new DisableAddressTransferCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    disableAwsNetworkPerformanceMetricSubscription(args, optionsOrCb, cb) {
        const command = new DisableAwsNetworkPerformanceMetricSubscriptionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    disableEbsEncryptionByDefault(args, optionsOrCb, cb) {
        const command = new DisableEbsEncryptionByDefaultCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    disableFastLaunch(args, optionsOrCb, cb) {
        const command = new DisableFastLaunchCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    disableFastSnapshotRestores(args, optionsOrCb, cb) {
        const command = new DisableFastSnapshotRestoresCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    disableImageDeprecation(args, optionsOrCb, cb) {
        const command = new DisableImageDeprecationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    disableIpamOrganizationAdminAccount(args, optionsOrCb, cb) {
        const command = new DisableIpamOrganizationAdminAccountCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    disableSerialConsoleAccess(args, optionsOrCb, cb) {
        const command = new DisableSerialConsoleAccessCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    disableTransitGatewayRouteTablePropagation(args, optionsOrCb, cb) {
        const command = new DisableTransitGatewayRouteTablePropagationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    disableVgwRoutePropagation(args, optionsOrCb, cb) {
        const command = new DisableVgwRoutePropagationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    disableVpcClassicLink(args, optionsOrCb, cb) {
        const command = new DisableVpcClassicLinkCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    disableVpcClassicLinkDnsSupport(args, optionsOrCb, cb) {
        const command = new DisableVpcClassicLinkDnsSupportCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    disassociateAddress(args, optionsOrCb, cb) {
        const command = new DisassociateAddressCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    disassociateClientVpnTargetNetwork(args, optionsOrCb, cb) {
        const command = new DisassociateClientVpnTargetNetworkCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    disassociateEnclaveCertificateIamRole(args, optionsOrCb, cb) {
        const command = new DisassociateEnclaveCertificateIamRoleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    disassociateIamInstanceProfile(args, optionsOrCb, cb) {
        const command = new DisassociateIamInstanceProfileCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    disassociateInstanceEventWindow(args, optionsOrCb, cb) {
        const command = new DisassociateInstanceEventWindowCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    disassociateIpamResourceDiscovery(args, optionsOrCb, cb) {
        const command = new DisassociateIpamResourceDiscoveryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    disassociateNatGatewayAddress(args, optionsOrCb, cb) {
        const command = new DisassociateNatGatewayAddressCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    disassociateRouteTable(args, optionsOrCb, cb) {
        const command = new DisassociateRouteTableCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    disassociateSubnetCidrBlock(args, optionsOrCb, cb) {
        const command = new DisassociateSubnetCidrBlockCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    disassociateTransitGatewayMulticastDomain(args, optionsOrCb, cb) {
        const command = new DisassociateTransitGatewayMulticastDomainCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    disassociateTransitGatewayPolicyTable(args, optionsOrCb, cb) {
        const command = new DisassociateTransitGatewayPolicyTableCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    disassociateTransitGatewayRouteTable(args, optionsOrCb, cb) {
        const command = new DisassociateTransitGatewayRouteTableCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    disassociateTrunkInterface(args, optionsOrCb, cb) {
        const command = new DisassociateTrunkInterfaceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    disassociateVpcCidrBlock(args, optionsOrCb, cb) {
        const command = new DisassociateVpcCidrBlockCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    enableAddressTransfer(args, optionsOrCb, cb) {
        const command = new EnableAddressTransferCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    enableAwsNetworkPerformanceMetricSubscription(args, optionsOrCb, cb) {
        const command = new EnableAwsNetworkPerformanceMetricSubscriptionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    enableEbsEncryptionByDefault(args, optionsOrCb, cb) {
        const command = new EnableEbsEncryptionByDefaultCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    enableFastLaunch(args, optionsOrCb, cb) {
        const command = new EnableFastLaunchCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    enableFastSnapshotRestores(args, optionsOrCb, cb) {
        const command = new EnableFastSnapshotRestoresCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    enableImageDeprecation(args, optionsOrCb, cb) {
        const command = new EnableImageDeprecationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    enableIpamOrganizationAdminAccount(args, optionsOrCb, cb) {
        const command = new EnableIpamOrganizationAdminAccountCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    enableReachabilityAnalyzerOrganizationSharing(args, optionsOrCb, cb) {
        const command = new EnableReachabilityAnalyzerOrganizationSharingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    enableSerialConsoleAccess(args, optionsOrCb, cb) {
        const command = new EnableSerialConsoleAccessCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    enableTransitGatewayRouteTablePropagation(args, optionsOrCb, cb) {
        const command = new EnableTransitGatewayRouteTablePropagationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    enableVgwRoutePropagation(args, optionsOrCb, cb) {
        const command = new EnableVgwRoutePropagationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    enableVolumeIO(args, optionsOrCb, cb) {
        const command = new EnableVolumeIOCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    enableVpcClassicLink(args, optionsOrCb, cb) {
        const command = new EnableVpcClassicLinkCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    enableVpcClassicLinkDnsSupport(args, optionsOrCb, cb) {
        const command = new EnableVpcClassicLinkDnsSupportCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    exportClientVpnClientCertificateRevocationList(args, optionsOrCb, cb) {
        const command = new ExportClientVpnClientCertificateRevocationListCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    exportClientVpnClientConfiguration(args, optionsOrCb, cb) {
        const command = new ExportClientVpnClientConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    exportImage(args, optionsOrCb, cb) {
        const command = new ExportImageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    exportTransitGatewayRoutes(args, optionsOrCb, cb) {
        const command = new ExportTransitGatewayRoutesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getAssociatedEnclaveCertificateIamRoles(args, optionsOrCb, cb) {
        const command = new GetAssociatedEnclaveCertificateIamRolesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getAssociatedIpv6PoolCidrs(args, optionsOrCb, cb) {
        const command = new GetAssociatedIpv6PoolCidrsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getAwsNetworkPerformanceData(args, optionsOrCb, cb) {
        const command = new GetAwsNetworkPerformanceDataCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getCapacityReservationUsage(args, optionsOrCb, cb) {
        const command = new GetCapacityReservationUsageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getCoipPoolUsage(args, optionsOrCb, cb) {
        const command = new GetCoipPoolUsageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getConsoleOutput(args, optionsOrCb, cb) {
        const command = new GetConsoleOutputCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getConsoleScreenshot(args, optionsOrCb, cb) {
        const command = new GetConsoleScreenshotCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getDefaultCreditSpecification(args, optionsOrCb, cb) {
        const command = new GetDefaultCreditSpecificationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getEbsDefaultKmsKeyId(args, optionsOrCb, cb) {
        const command = new GetEbsDefaultKmsKeyIdCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getEbsEncryptionByDefault(args, optionsOrCb, cb) {
        const command = new GetEbsEncryptionByDefaultCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getFlowLogsIntegrationTemplate(args, optionsOrCb, cb) {
        const command = new GetFlowLogsIntegrationTemplateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getGroupsForCapacityReservation(args, optionsOrCb, cb) {
        const command = new GetGroupsForCapacityReservationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getHostReservationPurchasePreview(args, optionsOrCb, cb) {
        const command = new GetHostReservationPurchasePreviewCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getInstanceTypesFromInstanceRequirements(args, optionsOrCb, cb) {
        const command = new GetInstanceTypesFromInstanceRequirementsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getInstanceUefiData(args, optionsOrCb, cb) {
        const command = new GetInstanceUefiDataCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getIpamAddressHistory(args, optionsOrCb, cb) {
        const command = new GetIpamAddressHistoryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getIpamDiscoveredAccounts(args, optionsOrCb, cb) {
        const command = new GetIpamDiscoveredAccountsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getIpamDiscoveredResourceCidrs(args, optionsOrCb, cb) {
        const command = new GetIpamDiscoveredResourceCidrsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getIpamPoolAllocations(args, optionsOrCb, cb) {
        const command = new GetIpamPoolAllocationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getIpamPoolCidrs(args, optionsOrCb, cb) {
        const command = new GetIpamPoolCidrsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getIpamResourceCidrs(args, optionsOrCb, cb) {
        const command = new GetIpamResourceCidrsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getLaunchTemplateData(args, optionsOrCb, cb) {
        const command = new GetLaunchTemplateDataCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getManagedPrefixListAssociations(args, optionsOrCb, cb) {
        const command = new GetManagedPrefixListAssociationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getManagedPrefixListEntries(args, optionsOrCb, cb) {
        const command = new GetManagedPrefixListEntriesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getNetworkInsightsAccessScopeAnalysisFindings(args, optionsOrCb, cb) {
        const command = new GetNetworkInsightsAccessScopeAnalysisFindingsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getNetworkInsightsAccessScopeContent(args, optionsOrCb, cb) {
        const command = new GetNetworkInsightsAccessScopeContentCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getPasswordData(args, optionsOrCb, cb) {
        const command = new GetPasswordDataCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getReservedInstancesExchangeQuote(args, optionsOrCb, cb) {
        const command = new GetReservedInstancesExchangeQuoteCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getSerialConsoleAccessStatus(args, optionsOrCb, cb) {
        const command = new GetSerialConsoleAccessStatusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getSpotPlacementScores(args, optionsOrCb, cb) {
        const command = new GetSpotPlacementScoresCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getSubnetCidrReservations(args, optionsOrCb, cb) {
        const command = new GetSubnetCidrReservationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getTransitGatewayAttachmentPropagations(args, optionsOrCb, cb) {
        const command = new GetTransitGatewayAttachmentPropagationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getTransitGatewayMulticastDomainAssociations(args, optionsOrCb, cb) {
        const command = new GetTransitGatewayMulticastDomainAssociationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getTransitGatewayPolicyTableAssociations(args, optionsOrCb, cb) {
        const command = new GetTransitGatewayPolicyTableAssociationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getTransitGatewayPolicyTableEntries(args, optionsOrCb, cb) {
        const command = new GetTransitGatewayPolicyTableEntriesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getTransitGatewayPrefixListReferences(args, optionsOrCb, cb) {
        const command = new GetTransitGatewayPrefixListReferencesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getTransitGatewayRouteTableAssociations(args, optionsOrCb, cb) {
        const command = new GetTransitGatewayRouteTableAssociationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getTransitGatewayRouteTablePropagations(args, optionsOrCb, cb) {
        const command = new GetTransitGatewayRouteTablePropagationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getVerifiedAccessEndpointPolicy(args, optionsOrCb, cb) {
        const command = new GetVerifiedAccessEndpointPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getVerifiedAccessGroupPolicy(args, optionsOrCb, cb) {
        const command = new GetVerifiedAccessGroupPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getVpnConnectionDeviceSampleConfiguration(args, optionsOrCb, cb) {
        const command = new GetVpnConnectionDeviceSampleConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getVpnConnectionDeviceTypes(args, optionsOrCb, cb) {
        const command = new GetVpnConnectionDeviceTypesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    importClientVpnClientCertificateRevocationList(args, optionsOrCb, cb) {
        const command = new ImportClientVpnClientCertificateRevocationListCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    importImage(args, optionsOrCb, cb) {
        const command = new ImportImageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    importInstance(args, optionsOrCb, cb) {
        const command = new ImportInstanceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    importKeyPair(args, optionsOrCb, cb) {
        const command = new ImportKeyPairCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    importSnapshot(args, optionsOrCb, cb) {
        const command = new ImportSnapshotCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    importVolume(args, optionsOrCb, cb) {
        const command = new ImportVolumeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listImagesInRecycleBin(args, optionsOrCb, cb) {
        const command = new ListImagesInRecycleBinCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listSnapshotsInRecycleBin(args, optionsOrCb, cb) {
        const command = new ListSnapshotsInRecycleBinCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyAddressAttribute(args, optionsOrCb, cb) {
        const command = new ModifyAddressAttributeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyAvailabilityZoneGroup(args, optionsOrCb, cb) {
        const command = new ModifyAvailabilityZoneGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyCapacityReservation(args, optionsOrCb, cb) {
        const command = new ModifyCapacityReservationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyCapacityReservationFleet(args, optionsOrCb, cb) {
        const command = new ModifyCapacityReservationFleetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyClientVpnEndpoint(args, optionsOrCb, cb) {
        const command = new ModifyClientVpnEndpointCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyDefaultCreditSpecification(args, optionsOrCb, cb) {
        const command = new ModifyDefaultCreditSpecificationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyEbsDefaultKmsKeyId(args, optionsOrCb, cb) {
        const command = new ModifyEbsDefaultKmsKeyIdCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyFleet(args, optionsOrCb, cb) {
        const command = new ModifyFleetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyFpgaImageAttribute(args, optionsOrCb, cb) {
        const command = new ModifyFpgaImageAttributeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyHosts(args, optionsOrCb, cb) {
        const command = new ModifyHostsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyIdentityIdFormat(args, optionsOrCb, cb) {
        const command = new ModifyIdentityIdFormatCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyIdFormat(args, optionsOrCb, cb) {
        const command = new ModifyIdFormatCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyImageAttribute(args, optionsOrCb, cb) {
        const command = new ModifyImageAttributeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyInstanceAttribute(args, optionsOrCb, cb) {
        const command = new ModifyInstanceAttributeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyInstanceCapacityReservationAttributes(args, optionsOrCb, cb) {
        const command = new ModifyInstanceCapacityReservationAttributesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyInstanceCreditSpecification(args, optionsOrCb, cb) {
        const command = new ModifyInstanceCreditSpecificationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyInstanceEventStartTime(args, optionsOrCb, cb) {
        const command = new ModifyInstanceEventStartTimeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyInstanceEventWindow(args, optionsOrCb, cb) {
        const command = new ModifyInstanceEventWindowCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyInstanceMaintenanceOptions(args, optionsOrCb, cb) {
        const command = new ModifyInstanceMaintenanceOptionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyInstanceMetadataOptions(args, optionsOrCb, cb) {
        const command = new ModifyInstanceMetadataOptionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyInstancePlacement(args, optionsOrCb, cb) {
        const command = new ModifyInstancePlacementCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyIpam(args, optionsOrCb, cb) {
        const command = new ModifyIpamCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyIpamPool(args, optionsOrCb, cb) {
        const command = new ModifyIpamPoolCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyIpamResourceCidr(args, optionsOrCb, cb) {
        const command = new ModifyIpamResourceCidrCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyIpamResourceDiscovery(args, optionsOrCb, cb) {
        const command = new ModifyIpamResourceDiscoveryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyIpamScope(args, optionsOrCb, cb) {
        const command = new ModifyIpamScopeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyLaunchTemplate(args, optionsOrCb, cb) {
        const command = new ModifyLaunchTemplateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyLocalGatewayRoute(args, optionsOrCb, cb) {
        const command = new ModifyLocalGatewayRouteCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyManagedPrefixList(args, optionsOrCb, cb) {
        const command = new ModifyManagedPrefixListCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyNetworkInterfaceAttribute(args, optionsOrCb, cb) {
        const command = new ModifyNetworkInterfaceAttributeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyPrivateDnsNameOptions(args, optionsOrCb, cb) {
        const command = new ModifyPrivateDnsNameOptionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyReservedInstances(args, optionsOrCb, cb) {
        const command = new ModifyReservedInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifySecurityGroupRules(args, optionsOrCb, cb) {
        const command = new ModifySecurityGroupRulesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifySnapshotAttribute(args, optionsOrCb, cb) {
        const command = new ModifySnapshotAttributeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifySnapshotTier(args, optionsOrCb, cb) {
        const command = new ModifySnapshotTierCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifySpotFleetRequest(args, optionsOrCb, cb) {
        const command = new ModifySpotFleetRequestCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifySubnetAttribute(args, optionsOrCb, cb) {
        const command = new ModifySubnetAttributeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyTrafficMirrorFilterNetworkServices(args, optionsOrCb, cb) {
        const command = new ModifyTrafficMirrorFilterNetworkServicesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyTrafficMirrorFilterRule(args, optionsOrCb, cb) {
        const command = new ModifyTrafficMirrorFilterRuleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyTrafficMirrorSession(args, optionsOrCb, cb) {
        const command = new ModifyTrafficMirrorSessionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyTransitGateway(args, optionsOrCb, cb) {
        const command = new ModifyTransitGatewayCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyTransitGatewayPrefixListReference(args, optionsOrCb, cb) {
        const command = new ModifyTransitGatewayPrefixListReferenceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyTransitGatewayVpcAttachment(args, optionsOrCb, cb) {
        const command = new ModifyTransitGatewayVpcAttachmentCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyVerifiedAccessEndpoint(args, optionsOrCb, cb) {
        const command = new ModifyVerifiedAccessEndpointCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyVerifiedAccessEndpointPolicy(args, optionsOrCb, cb) {
        const command = new ModifyVerifiedAccessEndpointPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyVerifiedAccessGroup(args, optionsOrCb, cb) {
        const command = new ModifyVerifiedAccessGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyVerifiedAccessGroupPolicy(args, optionsOrCb, cb) {
        const command = new ModifyVerifiedAccessGroupPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyVerifiedAccessInstance(args, optionsOrCb, cb) {
        const command = new ModifyVerifiedAccessInstanceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyVerifiedAccessInstanceLoggingConfiguration(args, optionsOrCb, cb) {
        const command = new ModifyVerifiedAccessInstanceLoggingConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyVerifiedAccessTrustProvider(args, optionsOrCb, cb) {
        const command = new ModifyVerifiedAccessTrustProviderCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyVolume(args, optionsOrCb, cb) {
        const command = new ModifyVolumeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyVolumeAttribute(args, optionsOrCb, cb) {
        const command = new ModifyVolumeAttributeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyVpcAttribute(args, optionsOrCb, cb) {
        const command = new ModifyVpcAttributeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyVpcEndpoint(args, optionsOrCb, cb) {
        const command = new ModifyVpcEndpointCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyVpcEndpointConnectionNotification(args, optionsOrCb, cb) {
        const command = new ModifyVpcEndpointConnectionNotificationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyVpcEndpointServiceConfiguration(args, optionsOrCb, cb) {
        const command = new ModifyVpcEndpointServiceConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyVpcEndpointServicePayerResponsibility(args, optionsOrCb, cb) {
        const command = new ModifyVpcEndpointServicePayerResponsibilityCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyVpcEndpointServicePermissions(args, optionsOrCb, cb) {
        const command = new ModifyVpcEndpointServicePermissionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyVpcPeeringConnectionOptions(args, optionsOrCb, cb) {
        const command = new ModifyVpcPeeringConnectionOptionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyVpcTenancy(args, optionsOrCb, cb) {
        const command = new ModifyVpcTenancyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyVpnConnection(args, optionsOrCb, cb) {
        const command = new ModifyVpnConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyVpnConnectionOptions(args, optionsOrCb, cb) {
        const command = new ModifyVpnConnectionOptionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyVpnTunnelCertificate(args, optionsOrCb, cb) {
        const command = new ModifyVpnTunnelCertificateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    modifyVpnTunnelOptions(args, optionsOrCb, cb) {
        const command = new ModifyVpnTunnelOptionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    monitorInstances(args, optionsOrCb, cb) {
        const command = new MonitorInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    moveAddressToVpc(args, optionsOrCb, cb) {
        const command = new MoveAddressToVpcCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    moveByoipCidrToIpam(args, optionsOrCb, cb) {
        const command = new MoveByoipCidrToIpamCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    provisionByoipCidr(args, optionsOrCb, cb) {
        const command = new ProvisionByoipCidrCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    provisionIpamPoolCidr(args, optionsOrCb, cb) {
        const command = new ProvisionIpamPoolCidrCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    provisionPublicIpv4PoolCidr(args, optionsOrCb, cb) {
        const command = new ProvisionPublicIpv4PoolCidrCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    purchaseHostReservation(args, optionsOrCb, cb) {
        const command = new PurchaseHostReservationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    purchaseReservedInstancesOffering(args, optionsOrCb, cb) {
        const command = new PurchaseReservedInstancesOfferingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    purchaseScheduledInstances(args, optionsOrCb, cb) {
        const command = new PurchaseScheduledInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    rebootInstances(args, optionsOrCb, cb) {
        const command = new RebootInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    registerImage(args, optionsOrCb, cb) {
        const command = new RegisterImageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    registerInstanceEventNotificationAttributes(args, optionsOrCb, cb) {
        const command = new RegisterInstanceEventNotificationAttributesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    registerTransitGatewayMulticastGroupMembers(args, optionsOrCb, cb) {
        const command = new RegisterTransitGatewayMulticastGroupMembersCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    registerTransitGatewayMulticastGroupSources(args, optionsOrCb, cb) {
        const command = new RegisterTransitGatewayMulticastGroupSourcesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    rejectTransitGatewayMulticastDomainAssociations(args, optionsOrCb, cb) {
        const command = new RejectTransitGatewayMulticastDomainAssociationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    rejectTransitGatewayPeeringAttachment(args, optionsOrCb, cb) {
        const command = new RejectTransitGatewayPeeringAttachmentCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    rejectTransitGatewayVpcAttachment(args, optionsOrCb, cb) {
        const command = new RejectTransitGatewayVpcAttachmentCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    rejectVpcEndpointConnections(args, optionsOrCb, cb) {
        const command = new RejectVpcEndpointConnectionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    rejectVpcPeeringConnection(args, optionsOrCb, cb) {
        const command = new RejectVpcPeeringConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    releaseAddress(args, optionsOrCb, cb) {
        const command = new ReleaseAddressCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    releaseHosts(args, optionsOrCb, cb) {
        const command = new ReleaseHostsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    releaseIpamPoolAllocation(args, optionsOrCb, cb) {
        const command = new ReleaseIpamPoolAllocationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    replaceIamInstanceProfileAssociation(args, optionsOrCb, cb) {
        const command = new ReplaceIamInstanceProfileAssociationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    replaceNetworkAclAssociation(args, optionsOrCb, cb) {
        const command = new ReplaceNetworkAclAssociationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    replaceNetworkAclEntry(args, optionsOrCb, cb) {
        const command = new ReplaceNetworkAclEntryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    replaceRoute(args, optionsOrCb, cb) {
        const command = new ReplaceRouteCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    replaceRouteTableAssociation(args, optionsOrCb, cb) {
        const command = new ReplaceRouteTableAssociationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    replaceTransitGatewayRoute(args, optionsOrCb, cb) {
        const command = new ReplaceTransitGatewayRouteCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    reportInstanceStatus(args, optionsOrCb, cb) {
        const command = new ReportInstanceStatusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    requestSpotFleet(args, optionsOrCb, cb) {
        const command = new RequestSpotFleetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    requestSpotInstances(args, optionsOrCb, cb) {
        const command = new RequestSpotInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    resetAddressAttribute(args, optionsOrCb, cb) {
        const command = new ResetAddressAttributeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    resetEbsDefaultKmsKeyId(args, optionsOrCb, cb) {
        const command = new ResetEbsDefaultKmsKeyIdCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    resetFpgaImageAttribute(args, optionsOrCb, cb) {
        const command = new ResetFpgaImageAttributeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    resetImageAttribute(args, optionsOrCb, cb) {
        const command = new ResetImageAttributeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    resetInstanceAttribute(args, optionsOrCb, cb) {
        const command = new ResetInstanceAttributeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    resetNetworkInterfaceAttribute(args, optionsOrCb, cb) {
        const command = new ResetNetworkInterfaceAttributeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    resetSnapshotAttribute(args, optionsOrCb, cb) {
        const command = new ResetSnapshotAttributeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    restoreAddressToClassic(args, optionsOrCb, cb) {
        const command = new RestoreAddressToClassicCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    restoreImageFromRecycleBin(args, optionsOrCb, cb) {
        const command = new RestoreImageFromRecycleBinCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    restoreManagedPrefixListVersion(args, optionsOrCb, cb) {
        const command = new RestoreManagedPrefixListVersionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    restoreSnapshotFromRecycleBin(args, optionsOrCb, cb) {
        const command = new RestoreSnapshotFromRecycleBinCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    restoreSnapshotTier(args, optionsOrCb, cb) {
        const command = new RestoreSnapshotTierCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    revokeClientVpnIngress(args, optionsOrCb, cb) {
        const command = new RevokeClientVpnIngressCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    revokeSecurityGroupEgress(args, optionsOrCb, cb) {
        const command = new RevokeSecurityGroupEgressCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    revokeSecurityGroupIngress(args, optionsOrCb, cb) {
        const command = new RevokeSecurityGroupIngressCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    runInstances(args, optionsOrCb, cb) {
        const command = new RunInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    runScheduledInstances(args, optionsOrCb, cb) {
        const command = new RunScheduledInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    searchLocalGatewayRoutes(args, optionsOrCb, cb) {
        const command = new SearchLocalGatewayRoutesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    searchTransitGatewayMulticastGroups(args, optionsOrCb, cb) {
        const command = new SearchTransitGatewayMulticastGroupsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    searchTransitGatewayRoutes(args, optionsOrCb, cb) {
        const command = new SearchTransitGatewayRoutesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    sendDiagnosticInterrupt(args, optionsOrCb, cb) {
        const command = new SendDiagnosticInterruptCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    startInstances(args, optionsOrCb, cb) {
        const command = new StartInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    startNetworkInsightsAccessScopeAnalysis(args, optionsOrCb, cb) {
        const command = new StartNetworkInsightsAccessScopeAnalysisCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    startNetworkInsightsAnalysis(args, optionsOrCb, cb) {
        const command = new StartNetworkInsightsAnalysisCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    startVpcEndpointServicePrivateDnsVerification(args, optionsOrCb, cb) {
        const command = new StartVpcEndpointServicePrivateDnsVerificationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    stopInstances(args, optionsOrCb, cb) {
        const command = new StopInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    terminateClientVpnConnections(args, optionsOrCb, cb) {
        const command = new TerminateClientVpnConnectionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    terminateInstances(args, optionsOrCb, cb) {
        const command = new TerminateInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    unassignIpv6Addresses(args, optionsOrCb, cb) {
        const command = new UnassignIpv6AddressesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    unassignPrivateIpAddresses(args, optionsOrCb, cb) {
        const command = new UnassignPrivateIpAddressesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    unassignPrivateNatGatewayAddress(args, optionsOrCb, cb) {
        const command = new UnassignPrivateNatGatewayAddressCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    unmonitorInstances(args, optionsOrCb, cb) {
        const command = new UnmonitorInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateSecurityGroupRuleDescriptionsEgress(args, optionsOrCb, cb) {
        const command = new UpdateSecurityGroupRuleDescriptionsEgressCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateSecurityGroupRuleDescriptionsIngress(args, optionsOrCb, cb) {
        const command = new UpdateSecurityGroupRuleDescriptionsIngressCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    withdrawByoipCidr(args, optionsOrCb, cb) {
        const command = new WithdrawByoipCidrCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
}
